{"version":3,"sources":["components/ComparisonTable.jsx","components/UI-Kit/Button.jsx","components/UI-Kit/TextField.jsx","components/UI-Kit/Select.jsx","components/styles/index.js","components/formik/SimpleForm.jsx","components/formik/FormWithYup.jsx","utils.js","constants.js","components/formik/FormWithFetch.jsx","hooks/useCountries.js","hooks/userRegions.js","components/formik/FormWithDynamicInput.jsx","components/formik/Wizard.jsx","components/syntaxHighlight/SyntaxHighligh.jsx","components/Forms.jsx","components/syntaxHighlight/formik/simpleForm.js","components/syntaxHighlight/formik/formWithYup.js","components/syntaxHighlight/formik/formWithFetch.js","components/syntaxHighlight/formik/formWithDynamicInput.js","components/syntaxHighlight/formik/wizard.js","App.js","serviceWorker.js","index.js"],"names":["styles","table","margin","th","fontWeight","padding","tht","color","fontSize","tr","trh","background","td","secondaryInfo","marginTop","comparisionData","name","size","minified","minifiedGZipped","typescript","asyncValidation","schemaValidation","popularity","wizard","Table","formik","finalForm","react_default","a","createElement","style","btn","Button","props","next","Object","assign","container","error","TextField","touched","textfield_next","Select","select_next","components_styles","form","display","flexDirection","justifyContent","alignItems","getInitialValues","email","password","validate","values","errors","test","onSubmit","_ref2","setSubmitting","setTimeout","alert","JSON","stringify","LoginForm","formik_esm","initialValues","_ref","handleChange","handleBlur","handleSubmit","isSubmitting","commonStyles","UI_Kit_TextField","type","onChange","onBlur","value","label","UI_Kit_Button","disabled","unelevated","LoginSchema","Yup","shape","required","min","max","LoginFormYup","validationSchema","fetchUrl","_x","_fetchUrl","apply","this","arguments","_callee","url","response","json","regenerator_default","wrap","_context","prev","fetch","sent","abrupt","stop","ROOT_API","countiesOptions$","createSelector","_","identity","countries","map","code","regionsOptions$","regions","region","firstName","lastName","country","FormikRMWCTextField","_ref6","render","_ref7","field","_ref8","SignUpForm","_useState","useState","_useState2","slicedToArray","setCountry","_useCountries","data","setData","_useState3","_useState4","loading","setLoading","useEffect","_fetchCountries","asyncToGenerator","mark","concat","fetchCountries","useCountries","_useCountries2","_userRegions","countryCode","_fetchRegions","_data","fetchRegions","userRegions","_userRegions2","_ref3","FormWithFetch_FormikRMWCTextField","_ref4","UI_Kit_Select","options","minWidth","maxWidth","e","target","setFieldValue","_ref5","todoItem","todoRemoveBtn","todos","item","FormWithDynamicInput","validateTodo","reduce","acc","todo","index","objectSpread","defineProperty","_this","todoPrefix","addTodo","setState","toConsumableArray","state","_this2","insert","remove","push","key","FormWithDynamicInput_GroupItemTextField","groupName","icon_button_next","icon","onClick","submit","React","Component","GroupItemTextField","get","undefined","Wizard","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","page","Math","children","length","previous","activePage","Children","toArray","bag","_this$props","count","setTouched","_this$state","isLastPage","enableReinitialize","handleReset","className","Page","App","Wizard_Wizard","favoriteColor","actions","ms","Promise","resolve","then","window","Wizard_FormikRMWCTextField","component","SyntaxHighlight","codeString","prism","language","customStyle","borderLeft","maxHeight","titleWapper","width","title","lineHeight","marginBottom","textAlign","subtitle","formAndCodeWrapper","position","formAndCode","flexWrap","formWrapper","minHeigh","overflow","flex","perspective","codeWrapper","renderForm","Forms","ComparisonTable","SimpleForm","SyntaxHighligh","FormWithYup","FormWithFetch","FormWithDynamicInput_FormWithDynamicInput","formik_Wizard","components_Forms","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.988897c4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst styles = {\n  table: {\n    margin: \"20px auto\"\n  },\n  th: {\n    fontWeight: 500,\n    padding: \"10px 5px\"\n  },\n  tht: {\n    fontWeight: 500,\n    color: \"rgb(45,45,45)\",\n    padding: \"10px 5px\",\n    fontSize: \"1.1em\"\n  },\n  tr: {\n    padding: \"10px 0\",\n    color: `rgba(45,45,45,0.8)`\n  },\n  trh: {\n    padding: \"10px 0\",\n    background: \"rgba(98, 42, 109, 0.3)\",\n    color: `rgba(45,45,45,0.8)`\n  },\n  td: {\n    padding: \"10px 30px\"\n  },\n  secondaryInfo: {\n    marginTop: 5,\n    fontSize: \"0.8em\"\n  }\n};\nconst comparisionData = {\n  formik: {\n    name: \"Formik\",\n    size: {\n      minified: \"43 kB\",\n      minifiedGZipped: \"12.6 kB\"\n    },\n    typescript: \"✓\",\n    asyncValidation: \"✓\",\n    schemaValidation: \"✓\",\n    popularity: \"428,133\",\n    wizard: \"✓\"\n  },\n  finalForm: {\n    name: \"React Final Form\",\n    size: {\n      minified: \"8.1 kB\",\n      minifiedGZipped: \"3.1 kB\"\n    },\n    typescript: \"✓\",\n    asyncValidation: \"✓\",\n    schemaValidation: \"✗\",\n    popularity: \"83,674\",\n    wizard: \"✓\"\n  }\n};\nconst Table = () => {\n  const { formik, finalForm } = comparisionData;\n  return (\n    <table style={styles.table}>\n      <tbody>\n        <tr style={styles.tr}>\n          <th />\n          <th style={styles.tht}>{formik.name}</th>\n          <th style={styles.tht}>{finalForm.name}</th>\n        </tr>\n        <tr style={styles.trh}>\n          <th style={styles.th}>Size</th>\n          <td style={styles.td}>\n            <span>{formik.size.minified}</span>\n            <span>{formik.size.minifiedGZipped}</span>\n          </td>\n          <td style={styles.td}>\n            <span>{finalForm.size.minified}</span>\n            <span>{finalForm.size.minifiedGZipped}</span>\n          </td>\n        </tr>\n        <tr style={styles.tr}>\n          <th style={styles.th}>TypeScripct</th>\n          <td style={styles.td}>{formik.typescript}</td>\n          <td style={styles.td}>{finalForm.typescript}</td>\n        </tr>\n        <tr style={styles.trh}>\n          <th style={styles.th}>Async Validation</th>\n          <td style={styles.td}>{formik.asyncValidation}</td>\n          <td style={styles.td}>{finalForm.asyncValidation}</td>\n        </tr>\n        <tr style={styles.tr}>\n          <th style={styles.th}>Schema Validation</th>\n          <td style={styles.td}>{formik.schemaValidation}</td>\n          <td style={styles.td}>{finalForm.schemaValidation}</td>\n        </tr>\n        <tr style={styles.trh}>\n          <th style={styles.th}>Popularity</th>\n          <td style={styles.td}>\n            <div>\n              <div>{formik.popularity}</div>\n              <div style={styles.secondaryInfo}>Weekly Download</div>\n            </div>\n          </td>\n          <td style={styles.td}>\n            <div>\n              <div>{finalForm.popularity}</div>\n              <div style={styles.secondaryInfo}>Weekly Download</div>\n            </div>\n          </td>\n        </tr>\n        <tr style={styles.tr}>\n          <th style={styles.th}>Wizard</th>\n          <td style={styles.td}>{formik.wizard}</td>\n          <td style={styles.td}>{finalForm.wizard}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\nimport { Button as RmwcBtn } from \"rmwc\";\n\nconst styles = { btn: { margin: 10 } };\n\nconst Button = props => {\n  return <RmwcBtn style={styles.btn} {...props} />;\n};\n\nexport default Button;\n","import React from \"react\";\nimport { TextField as RmwcTxtField } from \"rmwc\";\n\nconst styles = {\n  container: { margin: 10 },\n  error: {\n    marginTop: 5,\n    fontSize: \"0.8em\",\n    color: \"red\"\n  }\n};\n\nconst TextField = props => {\n  const { error, touched } = props;\n  return (\n    <div style={styles.container}>\n      <RmwcTxtField {...props} />\n      {error && touched && <div style={styles.error}>{error}</div>}\n    </div>\n  );\n};\n\nexport default TextField;\n","import React from \"react\";\nimport { Select as RmwcSelect } from \"rmwc\";\n\nconst styles = {\n  container: { margin: 10 },\n  error: {\n    marginTop: 5,\n    fontSize: \"0.8em\",\n    color: \"red\"\n  }\n};\n\nconst Select = props => {\n  const { error, touched } = props;\n  return (\n    <div style={styles.container}>\n      <RmwcSelect {...props} />\n      {error && touched && <div style={styles.error}>{error}</div>}\n    </div>\n  );\n};\n\nexport default Select;\n","export default {\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n};\n","import React from \"react\";\nimport { Formik } from \"formik\";\n\n// RMWC Components\nimport { Button, TextField } from \"../UI-Kit\";\n\n// Styles\nimport commonStyles from \"../styles\";\n\nconst LoginForm = () => (\n  <div>\n    <Formik\n      initialValues={getInitialValues()}\n      validate={validate}\n      onSubmit={onSubmit}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting\n      }) => (\n        <form onSubmit={handleSubmit} style={commonStyles.form}>\n          <TextField\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            error={errors.email}\n            touched={touched.email}\n            label={\"Email\"}\n          />\n          <TextField\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n            error={errors.password}\n            touched={touched.password}\n            label={\"Pasword\"}\n          />\n          <Button\n            label=\"Submit\"\n            type=\"submit\"\n            disabled={isSubmitting}\n            unelevated\n          />\n        </form>\n      )}\n    </Formik>\n  </div>\n);\n\nconst getInitialValues = () => ({ email: \"\", password: \"\" });\n\nconst validate = values => {\n  let errors = {};\n  if (!values.email) {\n    errors.email = \"Email is required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n  if (!values.password) {\n    errors.password = \"Password is required\";\n  }\n  return errors;\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nexport default LoginForm;\n","import React from \"react\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\n// RMWC Components\nimport { Button, TextField } from \"../UI-Kit\";\n\n// Styles\nimport commonStyles from \"../styles\";\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Invalid email\")\n    .required(\"Required\"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required(\"Required\")\n});\n\nconst LoginFormYup = () => {\n  return (\n    <div>\n      <Formik\n        initialValues={getInitialValues()}\n        validationSchema={LoginSchema}\n        onSubmit={onSubmit}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          isSubmitting\n        }) => (\n          <Form style={commonStyles.form}>\n            <TextField\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n              error={errors.email}\n              touched={touched.email}\n              label={\"Email\"}\n            />\n            <TextField\n              type=\"password\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              error={errors.password}\n              touched={touched.password}\n              label={\"Pasword\"}\n            />\n            <Button\n              label=\"Submit\"\n              type=\"submit\"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst getInitialValues = () => ({\n  email: \"\",\n  password: \"\"\n});\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nexport default LoginFormYup;\n","export async function fetchUrl(url) {\n  const response = await fetch(url);\n  const json = await response.json();\n  return json;\n}\n","export const ROOT_API = \"https://location-api-hoss.herokuapp.com/\";\n","import React, { useState } from \"react\";\n\nimport _ from \"lodash\";\nimport { Form, Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { createSelector } from \"reselect\";\n\n// RMWC Components\nimport { Button, TextField, Select } from \"../UI-Kit\";\n\n// Hooks\nimport useCountries from \"../../hooks/useCountries\";\nimport userRegions from \"../../hooks/userRegions\";\n\n// Styles\nimport commonStyles from \"../styles\";\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst LoginSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  lastName: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  email: Yup.string()\n    .email(\"Invalid email\")\n    .required(\"Required\"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required(\"Required\"),\n  country: Yup.string().required(\"Required\"),\n  region: Yup.string().required(\"Required\")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={getInitialValues()}\n        validationSchema={LoginSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type=\"text\"\n              name=\"firstName\"\n              label=\"First Name\"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type=\"text\"\n              name=\"lastName\"\n              label=\"Last Name\"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type=\"email\"\n              name=\"email\"\n              label=\"Email\"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type=\"password\"\n              name=\"password\"\n              label=\"Password\"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name=\"country\"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label=\"Country\"\n                    error={errors[\"country\"]}\n                    touched={touched[\"country\"]}\n                    options={countiesOptions$(countries)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue(\"region\", \"\");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name=\"region\"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label=\"State/Province\"\n                    error={errors[\"region\"]}\n                    touched={touched[\"region\"]}\n                    options={regionsOptions$(regions)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                  />\n                );\n              }}\n            />\n            <Button\n              label=\"Submit\"\n              type=\"submit\"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={errors[name]}\n        touched={touched[name]}\n        label={label}\n      />\n    )}\n  />\n);\n\nconst getInitialValues = () => ({\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  country: \"\",\n  region: \"\"\n});\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nexport default SignUpForm;\n","import { useState, useEffect } from \"react\";\n\nimport { fetchUrl } from \"../utils\";\nimport { ROOT_API } from \"../constants\";\n\nexport default () => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(null);\n\n  useEffect(() => {\n    async function fetchCountries() {\n      setLoading(true);\n      const data = await fetchUrl(`${ROOT_API}countries`);\n      setData(data.countries);\n      setLoading(false);\n    }\n    fetchCountries();\n  }, []);\n  return [data, loading];\n};\n","import { useState, useEffect } from \"react\";\n\nimport { fetchUrl } from \"../utils\";\nimport { ROOT_API } from \"../constants\";\n\nexport default countryCode => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(null);\n\n  useEffect(() => {\n    async function fetchRegions() {\n      if (countryCode != null) {\n        setLoading(true);\n        const data = await fetchUrl(`${ROOT_API}regions/${countryCode}`);\n        setData(data.regions);\n        setLoading(false);\n      }\n    }\n    fetchRegions();\n  }, [countryCode]);\n  return [data, loading];\n};\n","import React from \"react\";\nimport * as Yup from \"yup\";\nimport _ from \"lodash\";\nimport { Form, Formik, Field, FieldArray } from \"formik\";\n\n// RMWC Components\nimport { Button, TextField } from \"../UI-Kit\";\nimport { IconButton } from \"rmwc\";\n\n// Styles\nimport commonStyles from \"../styles\";\nconst styles = {\n  todoItem: {\n    display: \"flex\"\n  },\n  todoRemoveBtn: {\n    marginTop: 15,\n    color: \"rgba(45,45,45,0.9)\"\n  }\n};\n\nconst initialValues = {\n  todos: [{ item: \"shopping\" }, { item: \"\" }]\n};\n\nexport default class FormWithDynamicInput extends React.Component {\n  render() {\n    return (\n      <div>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={this.onSubmit}\n          render={({ values, errors, touched }) => (\n            <Form style={commonStyles.form}>\n              <FieldArray\n                name=\"todos\"\n                render={({ insert, remove, push }) => (\n                  <div>\n                    {_.map(values.todos, (todo, index) => (\n                      <div style={styles.todoItem} key={index}>\n                        <GroupItemTextField\n                          type=\"text\"\n                          name={`todos.${index}.item`}\n                          index={index}\n                          label=\"Todo\"\n                          groupName=\"todos\"\n                          errors={errors}\n                          touched={touched}\n                          validate={this.validateTodo}\n                        />\n                        <IconButton\n                          style={styles.todoRemoveBtn}\n                          icon={\"close\"}\n                          type=\"button\"\n                          onClick={() => remove(index)}\n                        />\n                      </div>\n                    ))}\n                    <Button\n                      label=\"Add Todo\"\n                      icon=\"add\"\n                      type=\"button\"\n                      onClick={() => push({ item: \"\" })}\n                    />\n                  </div>\n                )}\n              />\n              <Button\n                unelevated\n                type=\"submit\"\n                label=\"Submit\"\n                onClick={this.submit}\n              />\n            </Form>\n          )}\n        />\n      </div>\n    );\n  }\n\n  validateTodo = value => {\n    let error;\n    if (value == null || _.size(value) === 0) {\n      error = \"Required\";\n    }\n    return error;\n  };\n\n  getInitialValues = todos =>\n    _.reduce(\n      todos,\n      (acc, todo, index) => ({\n        ...acc,\n        [`${this.todoPrefix}${index}`]: todo.item\n      }),\n      {}\n    );\n\n  addTodo = () => {\n    this.setState({\n      todos: [...this.state.todos, { item: \"\" }]\n    });\n  };\n\n  onSubmit = (values, { setSubmitting }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 400);\n  };\n}\n\nconst GroupItemTextField = ({\n  groupName,\n  name,\n  type,\n  errors,\n  touched,\n  label,\n  index,\n  validate\n}) => (\n  <Field\n    type={type}\n    name={name}\n    validate={validate}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={_.get(errors, [groupName, index, \"item\"], null)}\n        touched={_.get(touched, [groupName, index, \"item\"], false)}\n        label={label}\n      />\n    )}\n  />\n);\n","import React from \"react\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\n\n// RMWC Components\nimport { Button, TextField, Select } from \"../UI-Kit\";\n\n// Styles\nconst styles = {\n  error: {\n    marginTop: 5,\n    fontSize: \"0.8em\",\n    color: \"red\"\n  }\n};\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst required = value => (value ? undefined : \"Required\");\n\nclass Wizard extends React.Component {\n  static Page = ({ children }) => children;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      values: props.initialValues\n    };\n  }\n\n  next = values =>\n    this.setState(state => ({\n      page: Math.min(state.page + 1, this.props.children.length - 1),\n      values\n    }));\n\n  previous = () =>\n    this.setState(state => ({\n      page: Math.max(state.page - 1, 0)\n    }));\n\n  validate = values => {\n    const activePage = React.Children.toArray(this.props.children)[\n      this.state.page\n    ];\n    return activePage.props.validate ? activePage.props.validate(values) : {};\n  };\n\n  handleSubmit = (values, bag) => {\n    const { children, onSubmit } = this.props;\n    const { page } = this.state;\n    const isLastPage = page === React.Children.count(children) - 1;\n    if (isLastPage) {\n      return onSubmit(values, bag);\n    } else {\n      bag.setTouched({});\n      bag.setSubmitting(false);\n      this.next(values);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    const { page, values } = this.state;\n    const activePage = React.Children.toArray(children)[page];\n    const isLastPage = page === React.Children.count(children) - 1;\n    return (\n      <Formik\n        initialValues={values}\n        enableReinitialize={false}\n        validate={this.validate}\n        onSubmit={this.handleSubmit}\n        render={({ values, handleSubmit, isSubmitting, handleReset }) => (\n          <form onSubmit={handleSubmit}>\n            {activePage}\n            <div className=\"buttons\">\n              {page > 0 && (\n                <Button\n                  label=\"« Previous\"\n                  type=\"button\"\n                  onClick={this.previous}\n                />\n              )}\n\n              {!isLastPage && (\n                <Button label=\"Next »\" type=\"button\" onClick={this.next} />\n              )}\n              {isLastPage && (\n                <Button\n                  label=\"Submit\"\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  unelevated\n                />\n              )}\n            </div>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst App = () => (\n  <div className=\"App\">\n    <Wizard\n      initialValues={{\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        favoriteColor: \"\"\n      }}\n      onSubmit={(values, actions) => {\n        sleep(300).then(() => {\n          window.alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        });\n      }}\n    >\n      <Wizard.Page>\n        <div>\n          <FormikRMWCTextField\n            type=\"text\"\n            name=\"firstName\"\n            label=\"First Name\"\n            validate={required}\n          />\n          <ErrorMessage\n            style={styles.error}\n            name=\"firstName\"\n            component=\"div\"\n            className=\"field-error\"\n          />\n        </div>\n        <div>\n          <FormikRMWCTextField\n            type=\"text\"\n            name=\"lastName\"\n            label=\"Last Name\"\n            validate={required}\n          />\n          <ErrorMessage\n            style={styles.error}\n            name=\"lastName\"\n            component=\"div\"\n            className=\"field-error\"\n          />\n        </div>\n      </Wizard.Page>\n      <Wizard.Page\n        validate={values => {\n          const errors = {};\n          if (!values.email) {\n            errors.email = \"Required\";\n          }\n          if (!values.favoriteColor) {\n            errors.favoriteColor = \"Required\";\n          }\n          return errors;\n        }}\n      >\n        <div>\n          <FormikRMWCTextField type=\"email\" name=\"email\" label=\"Email\" />\n          <ErrorMessage\n            style={styles.error}\n            name=\"email\"\n            component=\"div\"\n            className=\"field-error\"\n          />\n        </div>\n        <div>\n          <Field\n            name=\"favoriteColor\"\n            render={({ field }) => {\n              return (\n                <Select\n                  {...field}\n                  label=\"Select a Color\"\n                  options={[\n                    { label: \"❤️ Red\", value: \"red\" },\n                    { label: \"💚 Green\", value: \"green\" },\n                    { label: \"💙 Blue\", value: \"blue\" }\n                  ]}\n                  style={{ minWidth: 233, maxWidth: 233 }}\n                />\n              );\n            }}\n          />\n          <ErrorMessage\n            style={styles.error}\n            name=\"favoriteColor\"\n            component=\"div\"\n            className=\"field-error\"\n          />\n        </div>\n      </Wizard.Page>\n    </Wizard>\n  </div>\n);\n\nexport default App;\n\nconst FormikRMWCTextField = ({ name, type, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => <TextField {...field} type={type} label={label} />}\n  />\n);\n","import React from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { prism } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nconst SyntaxHighlight = ({ codeString }) => {\n  return (\n    <SyntaxHighlighter\n      language=\"javascript\"\n      style={prism}\n      customStyle={{\n        background: \"#ECECEC\",\n        borderLeft: \"2px solid #9B65DE\",\n        maxHeight: 400\n      }}\n    >\n      {codeString}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default SyntaxHighlight;\n","import React from \"react\";\n\nimport ComparisonTable from \"./ComparisonTable\";\nimport SimpleForm from \"./formik/SimpleForm\";\nimport FormWithYup from \"./formik/FormWithYup\";\nimport FormWithFetch from \"./formik/FormWithFetch\";\nimport FormWithDynamicInput from \"./formik/FormWithDynamicInput\";\nimport Wizard from \"./formik/Wizard\";\n\n// Syntax Highligher\nimport SyntaxHighlight from \"./syntaxHighlight/SyntaxHighligh\";\nimport simpleFormCode from \"./syntaxHighlight/formik/simpleForm\";\nimport formWithDynamicInput from \"./syntaxHighlight/formik/formWithDynamicInput\";\nimport formWithFetch from \"./syntaxHighlight/formik/formWithFetch\";\nimport formWithYup from \"./syntaxHighlight/formik/formWithYup\";\nimport wizard from \"./syntaxHighlight/formik/wizard\";\n\n// Styles\nconst styles = {\n  table: {\n    margin: \"20px 10px 50px\"\n  },\n  titleWapper: {\n    maxWidth: 1000,\n    width: \"100%\",\n    margin: \"0 auto\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  title: {\n    fontSize: 28,\n    lineHeight: \"28px\",\n    fontWeight: 600,\n    marginBottom: 15,\n    width: \"100%\",\n    color: \"#252942\",\n    textAlign: \"left\"\n  },\n  subtitle: {\n    fontSize: 18,\n    lineHeight: \"28px\",\n    width: \"100%\",\n    color: \"#252942\",\n    textAlign: \"left\"\n  },\n  formAndCodeWrapper: {\n    background: \"#fafafa\",\n    display: \"flex\",\n    margin: \"30px 0 60px\",\n    position: \"relative\"\n  },\n  formAndCode: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    width: \"100%\"\n  },\n  formWrapper: {\n    justifyContent: \"flex-end\",\n    minHeigh: 250,\n    overflow: \"hidden\",\n    margin: 20\n  },\n  form: {\n    flex: \"0 1 450px\",\n    maxWidth: \"450px\",\n    display: \"flex\",\n    perspective: \"500px\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  codeWrapper: {\n    justifyContent: \"flex-end\",\n    minHeigh: 250,\n    overflow: \"hidden\",\n    margin: \"0px 10px 0px 50px\"\n  },\n  code: {\n    flex: \"0 1 100%\",\n    maxWidth: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  item: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n};\n\nconst Forms = () => {\n  return (\n    <div>\n      <div style={styles.table}>\n        <ComparisonTable />\n      </div>\n      {renderForm({\n        title: \"Simple form\",\n        subtitle: \"Just a simple example of a form with validation.\",\n        form: <SimpleForm />,\n        code: <SyntaxHighlight codeString={simpleFormCode} />\n      })}\n      {renderForm({\n        title: \"Form with schema validation\",\n        subtitle:\n          \"You can combine normal validation with schema validation using Yup.\",\n        form: <FormWithYup />,\n        code: <SyntaxHighlight codeString={formWithYup} />\n      })}\n      {renderForm({\n        title: \"Form with network request\",\n        subtitle: \"Fetch data based on the value of certain input.\",\n        form: <FormWithFetch />,\n        code: <SyntaxHighlight codeString={formWithFetch} />\n      })}\n      {renderForm({\n        title: \"Dynamic form\",\n        subtitle: \"Add new inputs dynamically to the form.\",\n        form: <FormWithDynamicInput />,\n        code: <SyntaxHighlight codeString={formWithDynamicInput} />\n      })}\n      {renderForm({\n        title: \"Form wizard\",\n        subtitle: \"Multi step form with validation.\",\n        form: <Wizard />,\n        code: <SyntaxHighlight codeString={wizard} />\n      })}\n    </div>\n  );\n};\n\nconst renderForm = ({ title, subtitle, form, code }) => (\n  <div style={styles.item}>\n    <div style={styles.titleWapper}>\n      <div style={styles.title}>{title}</div>\n      <div style={styles.subtitle}>{subtitle}</div>\n    </div>\n    <div style={styles.formAndCodeWrapper}>\n      <div style={styles.formAndCode}>\n        <div style={styles.formWrapper}>\n          <div style={styles.form}>{form}</div>\n        </div>\n        <div style={styles.codeWrapper}>\n          <div style={styles.code}>{code}</div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Forms;\n","const codeString = `import React from \"react\";\nimport { Formik } from \"formik\";\n\n// RMWC Components\nimport { Button, TextField } from \"../UI-Kit\";\n\n// Styles\nimport commonStyles from \"../styles\";\n\nconst LoginForm = () => (\n  <div>\n    <Formik\n      initialValues={getInitialValues()}\n      validate={validate}\n      onSubmit={onSubmit}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting\n      }) => (\n        <form onSubmit={handleSubmit} style={commonStyles.form}>\n          <TextField\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            error={errors.email}\n            touched={touched.email}\n            label={\"Email\"}\n          />\n          <TextField\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n            error={errors.password}\n            touched={touched.password}\n            label={\"Pasword\"}\n          />\n          <Button\n            label=\"Submit\"\n            type=\"submit\"\n            disabled={isSubmitting}\n            unelevated\n          />\n        </form>\n      )}\n    </Formik>\n  </div>\n);\n\nconst getInitialValues = () => ({ email: \"\", password: \"\" });\n\nconst validate = values => {\n  let errors = {};\n  if (!values.email) {\n    errors.email = \"Email is required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n  if (!values.password) {\n    errors.password = \"Password is required\";\n  }\n  return errors;\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nexport default LoginForm;\n`;\nexport default codeString;\n","const codeString = `import React from \"react\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\n// RMWC Components\nimport { Button, TextField } from \"../UI-Kit\";\n\n// Styles\nimport commonStyles from \"../styles\";\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Invalid email\")\n    .required(\"Required\"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required(\"Required\")\n});\n\nconst LoginFormYup = () => {\n  return (\n    <div>\n      <Formik\n        initialValues={getInitialValues()}\n        validationSchema={LoginSchema}\n        onSubmit={onSubmit}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          isSubmitting\n        }) => (\n          <Form style={commonStyles.form}>\n            <TextField\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n              error={errors.email}\n              touched={touched.email}\n              label={\"Email\"}\n            />\n            <TextField\n              type=\"password\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              error={errors.password}\n              touched={touched.password}\n              label={\"Pasword\"}\n            />\n            <Button\n              label=\"Submit\"\n              type=\"submit\"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst getInitialValues = () => ({\n  email: \"\",\n  password: \"\"\n});\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nexport default LoginFormYup;\n`;\nexport default codeString;\n","const codeString = `import React, { useState } from \"react\";\n\nimport _ from \"lodash\";\nimport { Form, Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { createSelector } from \"reselect\";\n\n// RMWC Components\nimport { Button, TextField, Select } from \"../UI-Kit\";\n\n// Hooks\nimport useCountries from \"../../hooks/useCountries\";\nimport userRegions from \"../../hooks/userRegions\";\n\n// Styles\nimport commonStyles from \"../styles\";\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst LoginSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  lastName: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  email: Yup.string()\n    .email(\"Invalid email\")\n    .required(\"Required\"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required(\"Required\"),\n  country: Yup.string().required(\"Required\"),\n  region: Yup.string().required(\"Required\")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={getInitialValues()}\n        validationSchema={LoginSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type=\"text\"\n              name=\"firstName\"\n              label=\"First Name\"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type=\"text\"\n              name=\"lastName\"\n              label=\"Last Name\"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type=\"email\"\n              name=\"email\"\n              label=\"Email\"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type=\"password\"\n              name=\"password\"\n              label=\"Password\"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name=\"country\"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label=\"Country\"\n                    error={errors[\"country\"]}\n                    touched={touched[\"country\"]}\n                    options={countiesOptions$(countries)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue(\"region\", \"\");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name=\"region\"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label=\"State/Province\"\n                    error={errors[\"region\"]}\n                    touched={touched[\"region\"]}\n                    options={regionsOptions$(regions)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                  />\n                );\n              }}\n            />\n            <Button\n              label=\"Submit\"\n              type=\"submit\"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={errors[name]}\n        touched={touched[name]}\n        label={label}\n      />\n    )}\n  />\n);\n\nconst getInitialValues = () => ({\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  country: \"\",\n  region: \"\"\n});\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nexport default SignUpForm;\n`;\nexport default codeString;\n","const codeString = `import React from \"react\";\nimport * as Yup from \"yup\";\nimport _ from \"lodash\";\nimport { Form, Formik, Field, FieldArray } from \"formik\";\n\n// RMWC Components\nimport { Button, TextField } from \"../UI-Kit\";\nimport { IconButton } from \"rmwc\";\n\n// Styles\nimport commonStyles from \"../styles\";\nconst styles = {\n  todoItem: {\n    display: \"flex\"\n  },\n  todoRemoveBtn: {\n    marginTop: 15,\n    color: \"rgba(45,45,45,0.9)\"\n  }\n};\n\nconst initialValues = {\n  todos: [{ item: \"shopping\" }, { item: \"\" }]\n};\n\nexport default class FormWithDynamicInput extends React.Component {\n  render() {\n    return (\n      <div>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={this.onSubmit}\n          render={({ values, errors, touched }) => (\n            <Form style={commonStyles.form}>\n              <FieldArray\n                name=\"todos\"\n                render={({ insert, remove, push }) => (\n                  <div>\n                    {_.map(values.todos, (todo, index) => (\n                      <div style={styles.todoItem} key={index}>\n                        <GroupItemTextField\n                          type=\"text\"\n                          name={\\`todos.\\${index}.item\\`}\n                          index={index}\n                          label=\"Todo\"\n                          groupName=\"todos\"\n                          errors={errors}\n                          touched={touched}\n                          validate={this.validateTodo}\n                        />\n                        <IconButton\n                          style={styles.todoRemoveBtn}\n                          icon={\"close\"}\n                          type=\"button\"\n                          onClick={() => remove(index)}\n                        />\n                      </div>\n                    ))}\n                    <Button\n                      label=\"Add Todo\"\n                      icon=\"add\"\n                      type=\"button\"\n                      onClick={() => push({ item: \"\" })}\n                    />\n                  </div>\n                )}\n              />\n              <Button\n                unelevated\n                type=\"submit\"\n                label=\"Submit\"\n                onClick={this.submit}\n              />\n            </Form>\n          )}\n        />\n      </div>\n    );\n  }\n\n  validateTodo = value => {\n    let error;\n    if (value == null || _.size(value) === 0) {\n      error = \"Required\";\n    }\n    return error;\n  };\n\n  getInitialValues = todos =>\n    _.reduce(\n      todos,\n      (acc, todo, index) => ({\n        ...acc,\n        [\\`\\${this.todoPrefix} \\${index}\\`]: todo.item\n      }),\n      {}\n    );\n\n  addTodo = () => {\n    this.setState({\n      todos: [...this.state.todos, { item: \"\" }]\n    });\n  };\n\n  onSubmit = (values, { setSubmitting }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 400);\n  };\n}\n\nconst GroupItemTextField = ({\n  groupName,\n  name,\n  type,\n  errors,\n  touched,\n  label,\n  index,\n  validate\n}) => (\n  <Field\n    type={type}\n    name={name}\n    validate={validate}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={_.get(errors, [groupName, index, \"item\"], null)}\n        touched={_.get(touched, [groupName, index, \"item\"], false)}\n        label={label}\n      />\n    )}\n  />\n);\n`;\nexport default codeString;\n","const codeString = `import React from \"react\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\n\n// RMWC Components\nimport { Button, TextField, Select } from \"../UI-Kit\";\n\n// Styles\nconst styles = {\n  error: {\n    marginTop: 5,\n    fontSize: \"0.8em\",\n    color: \"red\"\n  }\n};\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst required = value => (value ? undefined : \"Required\");\n\nclass Wizard extends React.Component {\n  static Page = ({ children }) => children;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      values: props.initialValues\n    };\n  }\n\n  next = values =>\n    this.setState(state => ({\n      page: Math.min(state.page + 1, this.props.children.length - 1),\n      values\n    }));\n\n  previous = () =>\n    this.setState(state => ({\n      page: Math.max(state.page - 1, 0)\n    }));\n\n  validate = values => {\n    const activePage = React.Children.toArray(this.props.children)[\n      this.state.page\n    ];\n    return activePage.props.validate ? activePage.props.validate(values) : {};\n  };\n\n  handleSubmit = (values, bag) => {\n    const { children, onSubmit } = this.props;\n    const { page } = this.state;\n    const isLastPage = page === React.Children.count(children) - 1;\n    if (isLastPage) {\n      return onSubmit(values, bag);\n    } else {\n      bag.setTouched({});\n      bag.setSubmitting(false);\n      this.next(values);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    const { page, values } = this.state;\n    const activePage = React.Children.toArray(children)[page];\n    const isLastPage = page === React.Children.count(children) - 1;\n    return (\n      <Formik\n        initialValues={values}\n        enableReinitialize={false}\n        validate={this.validate}\n        onSubmit={this.handleSubmit}\n        render={({ values, handleSubmit, isSubmitting, handleReset }) => (\n          <form onSubmit={handleSubmit}>\n            {activePage}\n            <div className=\"buttons\">\n              {page > 0 && (\n                <Button\n                  label=\"« Previous\"\n                  type=\"button\"\n                  onClick={this.previous}\n                />\n              )}\n\n              {!isLastPage && (\n                <Button label=\"Next »\" type=\"button\" onClick={this.next} />\n              )}\n              {isLastPage && (\n                <Button\n                  label=\"Submit\"\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  unelevated\n                />\n              )}\n            </div>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst App = () => (\n  <div className=\"App\">\n    <Wizard\n      initialValues={{\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        favoriteColor: \"\"\n      }}\n      onSubmit={(values, actions) => {\n        sleep(300).then(() => {\n          window.alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        });\n      }}\n    >\n      <Wizard.Page>\n        <div>\n          <FormikRMWCTextField\n            type=\"text\"\n            name=\"firstName\"\n            label=\"First Name\"\n            validate={required}\n          />\n          <ErrorMessage\n            style={styles.error}\n            name=\"firstName\"\n            component=\"div\"\n            className=\"field-error\"\n          />\n        </div>\n        <div>\n          <FormikRMWCTextField\n            type=\"text\"\n            name=\"lastName\"\n            label=\"Last Name\"\n            validate={required}\n          />\n          <ErrorMessage\n            style={styles.error}\n            name=\"lastName\"\n            component=\"div\"\n            className=\"field-error\"\n          />\n        </div>\n      </Wizard.Page>\n      <Wizard.Page\n        validate={values => {\n          const errors = {};\n          if (!values.email) {\n            errors.email = \"Required\";\n          }\n          if (!values.favoriteColor) {\n            errors.favoriteColor = \"Required\";\n          }\n          return errors;\n        }}\n      >\n        <div>\n          <FormikRMWCTextField type=\"email\" name=\"email\" label=\"Email\" />\n          <ErrorMessage\n            style={styles.error}\n            name=\"email\"\n            component=\"div\"\n            className=\"field-error\"\n          />\n        </div>\n        <div>\n          <Field\n            name=\"favoriteColor\"\n            render={({ field }) => {\n              return (\n                <Select\n                  {...field}\n                  label=\"Select a Color\"\n                  options={[\n                    { label: \"❤️ Red\", value: \"red\" },\n                    { label: \"💚 Green\", value: \"green\" },\n                    { label: \"💙 Blue\", value: \"blue\" }\n                  ]}\n                  style={{ minWidth: 233, maxWidth: 233 }}\n                />\n              );\n            }}\n          />\n          <ErrorMessage\n            style={styles.error}\n            name=\"favoriteColor\"\n            component=\"div\"\n            className=\"field-error\"\n          />\n        </div>\n      </Wizard.Page>\n    </Wizard>\n  </div>\n);\n\nexport default App;\n\nconst FormikRMWCTextField = ({ name, type, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => <TextField {...field} type={type} label={label} />}\n  />\n);\n`;\nexport default codeString;\n","import React from \"react\";\nimport \"@material/button/dist/mdc.button.min.css\";\nimport \"@material/textfield/dist/mdc.textfield.min.css\";\nimport \"@material/select/dist/mdc.select.min.css\";\nimport \"@material/icon-button/dist/mdc.icon-button.min.css\";\n\nimport Forms from \"./components/Forms\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Forms />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}