(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{168:function(e,n,t){e.exports=t(510)},173:function(e,n,t){},509:function(e,n,t){},510:function(e,n,t){"use strict";t.r(n);var r=t(0),o=t.n(r),i=t(63),a=t.n(i),l=(t(173),t(174),t(175),t(176),t(177),t(178),t(179),t(180),t(181),t(11)),s=t(530),m=t(532),u={table:{margin:"20px auto"},th:{fontWeight:500,padding:"10px 5px"},tht:{fontWeight:500,color:"rgb(45,45,45)",padding:"10px 5px",fontSize:"1.1em"},tr:{padding:"10px 0",color:"rgba(45,45,45,0.8)"},trh:{padding:"10px 0",background:"rgba(233, 223, 250)",color:"rgba(45,45,45,0.8)"},td:{padding:"10px 30px"},secondaryInfo:{marginTop:5,fontSize:"0.8em"}},c={name:"formik@1.5.8",size:{minifiedGZipped:"12.6 kB gzipped"},typescript:"\u2713",asyncValidation:"\u2713",schemaValidation:"\u2713",errorFocus:"\u2717",hooks:"\u2717",wizard:"\u2713",rerenderOptimization:"\u2717"},d={name:"react-final-form@6.3.0",size:{minifiedGZipped:"8.1 kB gzipped (including final-form@4.18.2)"},typescript:"\u2713",asyncValidation:"\u2713",schemaValidation:"\u2717",errorFocus:"\u2713",hooks:"\u2713",wizard:"\u2713",rerenderOptimization:"\u2713"},p=function(){var e=c,n=d;return o.a.createElement("table",{style:u.table},o.a.createElement("tbody",null,o.a.createElement("tr",{style:u.tr},o.a.createElement("th",null),o.a.createElement("th",{style:u.tht},e.name),o.a.createElement("th",{style:u.tht},n.name)),o.a.createElement("tr",{style:u.trh},o.a.createElement("th",{style:u.th},"Size"),o.a.createElement("td",{style:u.td},o.a.createElement("span",null,e.size.minifiedGZipped)),o.a.createElement("td",{style:u.td},o.a.createElement("span",null,n.size.minifiedGZipped))),o.a.createElement("tr",{style:u.tr},o.a.createElement("th",{style:u.th},"TypeScripct"),o.a.createElement("td",{style:u.td},e.typescript),o.a.createElement("td",{style:u.td},n.typescript)),o.a.createElement("tr",{style:u.trh},o.a.createElement("th",{style:u.th},"Async Validation"),o.a.createElement("td",{style:u.td},e.asyncValidation),o.a.createElement("td",{style:u.td},n.asyncValidation)),o.a.createElement("tr",{style:u.tr},o.a.createElement("th",{style:u.th},"Schema Validation"),o.a.createElement("td",{style:u.td},e.schemaValidation),o.a.createElement("td",{style:u.td},n.schemaValidation)),o.a.createElement("tr",{style:u.trh},o.a.createElement("th",{style:u.th},"On Submit Error Focus"),o.a.createElement("td",{style:u.td},e.errorFocus),o.a.createElement("td",{style:u.td},n.errorFocus)),o.a.createElement("tr",{style:u.tr},o.a.createElement("th",{style:u.th},"Hooks Support"),o.a.createElement("td",{style:u.td},e.hooks),o.a.createElement("td",{style:u.td},n.hooks)),o.a.createElement("tr",{style:u.trh},o.a.createElement("th",{style:u.th},"Rerender Optimization"),o.a.createElement("td",{style:u.td},e.rerenderOptimization),o.a.createElement("td",{style:u.td},n.rerenderOptimization)),o.a.createElement("tr",{style:u.tr},o.a.createElement("th",{style:u.th},"Wizard"),o.a.createElement("td",{style:u.td},e.wizard),o.a.createElement("td",{style:u.td},n.wizard))))},f=t(533),h=t(154),g=t(12);function b(){return(b=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function y(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var v=o.a.createElement("g",{fill:"#9B64DE"},o.a.createElement("path",{d:"M409.132,114.573c-19.608-33.596-46.205-60.194-79.798-79.8C295.736,15.166,259.057,5.365,219.271,5.365 c-39.781,0-76.472,9.804-110.063,29.408c-33.596,19.605-60.192,46.204-79.8,79.8C9.803,148.168,0,184.854,0,224.63 c0,47.78,13.94,90.745,41.827,128.906c27.884,38.164,63.906,64.572,108.063,79.227c5.14,0.954,8.945,0.283,11.419-1.996 c2.475-2.282,3.711-5.14,3.711-8.562c0-0.571-0.049-5.708-0.144-15.417c-0.098-9.709-0.144-18.179-0.144-25.406l-6.567,1.136 c-4.187,0.767-9.469,1.092-15.846,1c-6.374-0.089-12.991-0.757-19.842-1.999c-6.854-1.231-13.229-4.086-19.13-8.559 c-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559 c-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-0.951-2.568-2.098-3.711-3.429c-1.142-1.331-1.997-2.663-2.568-3.997 c-0.572-1.335-0.098-2.43,1.427-3.289c1.525-0.859,4.281-1.276,8.28-1.276l5.708,0.853c3.807,0.763,8.516,3.042,14.133,6.851 c5.614,3.806,10.229,8.754,13.846,14.842c4.38,7.806,9.657,13.754,15.846,17.847c6.184,4.093,12.419,6.136,18.699,6.136 c6.28,0,11.704-0.476,16.274-1.423c4.565-0.952,8.848-2.383,12.847-4.285c1.713-12.758,6.377-22.559,13.988-29.41 c-10.848-1.14-20.601-2.857-29.264-5.14c-8.658-2.286-17.605-5.996-26.835-11.14c-9.235-5.137-16.896-11.516-22.985-19.126 c-6.09-7.614-11.088-17.61-14.987-29.979c-3.901-12.374-5.852-26.648-5.852-42.826c0-23.035,7.52-42.637,22.557-58.817 c-7.044-17.318-6.379-36.732,1.997-58.24c5.52-1.715,13.706-0.428,24.554,3.853c10.85,4.283,18.794,7.952,23.84,10.994 c5.046,3.041,9.089,5.618,12.135,7.708c17.705-4.947,35.976-7.421,54.818-7.421s37.117,2.474,54.823,7.421l10.849-6.849 c7.419-4.57,16.18-8.758,26.262-12.565c10.088-3.805,17.802-4.853,23.134-3.138c8.562,21.509,9.325,40.922,2.279,58.24 c15.036,16.18,22.559,35.787,22.559,58.817c0,16.178-1.958,30.497-5.853,42.966c-3.9,12.471-8.941,22.457-15.125,29.979 c-6.191,7.521-13.901,13.85-23.131,18.986c-9.232,5.14-18.182,8.85-26.84,11.136c-8.662,2.286-18.415,4.004-29.263,5.146 c9.894,8.562,14.842,22.077,14.842,40.539v60.237c0,3.422,1.19,6.279,3.572,8.562c2.379,2.279,6.136,2.95,11.276,1.995 c44.163-14.653,80.185-41.062,108.068-79.226c27.88-38.161,41.825-81.126,41.825-128.906 C438.536,184.851,428.728,148.168,409.132,114.573z"})),S=o.a.createElement("g",null),F=o.a.createElement("g",null),x=o.a.createElement("g",null),C=o.a.createElement("g",null),E=o.a.createElement("g",null),R=o.a.createElement("g",null),w=o.a.createElement("g",null),k=o.a.createElement("g",null),T=o.a.createElement("g",null),N=o.a.createElement("g",null),q=o.a.createElement("g",null),W=o.a.createElement("g",null),O=o.a.createElement("g",null),j=o.a.createElement("g",null),V=o.a.createElement("g",null),Y=function(e){var n=e.svgRef,t=y(e,["svgRef"]);return o.a.createElement("svg",b({id:"Capa_1",x:"0px",y:"0px",width:"20px",height:"20px",viewBox:"0 0 438.549 438.549",style:{enableBackground:"new 0 0 438.549 438.549"},xmlSpace:"preserve",ref:n},t),v,S,F,x,C,E,R,w,k,T,N,q,W,O,j,V)},M=o.a.forwardRef(function(e,n){return o.a.createElement(Y,b({svgRef:n},e))}),B=(t.p,{wrapper:{width:"100%"},link:{color:"#9B64DE",textDecoration:"none",display:"flex",justifyContent:"flex-end",alignItems:"flex-end",padding:"5px 5px 15px"},icon:{marginLeft:5}}),L=function(e){var n=e.codeString,t=e.codeUrl;return o.a.createElement("div",{style:B.wrapper},o.a.createElement(f.a,{language:"javascript",style:h.a,customStyle:{background:"#ECECEC",borderLeft:"2px solid #9B65DE",maxHeight:400}},n),o.a.createElement("div",null,o.a.createElement("a",{style:B.link,href:t,target:"_blank",rel:"noopener noreferrer"},"View on ",o.a.createElement(g.a,{style:B.icon,icon:o.a.createElement(M,null)}))))},U=t(4),P=t(526),I={btn:{margin:10}},_=function(e){return o.a.createElement(P.a,Object.assign({style:I.btn},e))},$=t(531),A={container:{margin:10},error:{marginTop:5,fontSize:"0.8em",color:"red"}},z=function(e){var n=e.error,t=e.touched;return o.a.createElement("div",{style:A.container},o.a.createElement($.a,e),n&&t&&o.a.createElement("div",{style:A.error},n))},J=t(529),Z={container:{margin:10},error:{marginTop:5,fontSize:"0.8em",color:"red"}},H=function(e){var n=e.error,t=e.touched;return o.a.createElement("div",{style:Z.container},o.a.createElement(J.a,e),n&&t&&o.a.createElement("div",{style:Z.error},n))},D={form:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center"}},G={email:"",password:""},K=function(e){var n={};return e.email?/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(e.email)||(n.email="Invalid email address"):n.email="Email is required",e.password||(n.password="Password is required"),n},Q=function(e,n){var t=n.setSubmitting;setTimeout(function(){alert(JSON.stringify(e,null,2)),t(!1)},400)},X=function(){return o.a.createElement(U.e,{initialValues:G,validate:K,onSubmit:Q},function(e){var n=e.values,t=e.errors,r=e.touched,i=e.handleChange,a=e.handleBlur,l=e.handleSubmit,s=e.isSubmitting;return o.a.createElement("form",{onSubmit:l,style:D.form},o.a.createElement(z,{type:"email",name:"email",onChange:i,onBlur:a,value:n.email,error:t.email,touched:r.email,label:"Email"}),o.a.createElement(z,{type:"password",name:"password",onChange:i,onBlur:a,value:n.password,error:t.password,touched:r.password,label:"Pasword"}),o.a.createElement(_,{label:"Submit",type:"submit",disabled:s,unelevated:!0}))})},ee=t(9),ne={email:"",password:""},te=ee.object().shape({email:ee.string().email("Invalid email").required("Required"),password:ee.string().min(6,function(){return o.a.createElement("span",null,"Too short")}).max(50,o.a.createElement("span",null,"Too long")).required("Required")}),re=function(e,n){var t=n.setSubmitting;setTimeout(function(){alert(JSON.stringify(e,null,2)),t(!1)},400)},oe=function(){return o.a.createElement("div",null,o.a.createElement(U.e,{initialValues:ne,validationSchema:te,onSubmit:re},function(e){var n=e.values,t=e.errors,r=e.touched,i=e.handleChange,a=e.handleBlur,l=e.isSubmitting;return o.a.createElement(U.d,{style:D.form},o.a.createElement(z,{type:"email",name:"email",onChange:i,onBlur:a,value:n.email,error:t.email,touched:r.email,label:"Email"}),o.a.createElement(z,{type:"password",name:"password",onChange:i,onBlur:a,value:n.password,error:t.password,touched:r.password,label:"Pasword"}),o.a.createElement(_,{label:"Submit",type:"submit",disabled:l,unelevated:!0}))}))},ie=t(14),ae=t.n(ie),le=t(43),se=t(6),me=t.n(se),ue=t(10);function ce(e){return de.apply(this,arguments)}function de(){return(de=Object(ue.a)(me.a.mark(function e(n){var t,r;return me.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch(n);case 2:return t=e.sent,e.next=5,t.json();case 5:return r=e.sent,e.abrupt("return",r);case 7:case"end":return e.stop()}},e)}))).apply(this,arguments)}var pe="https://location-api-hoss.herokuapp.com/",fe=function(){var e=Object(r.useState)(null),n=Object(l.a)(e,2),t=n[0],o=n[1],i=Object(r.useState)(null),a=Object(l.a)(i,2),s=a[0],m=a[1];return Object(r.useEffect)(function(){function e(){return(e=Object(ue.a)(me.a.mark(function e(){var n;return me.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return m(!0),e.next=3,ce("".concat(pe,"countries"));case 3:n=e.sent,o(n.countries),m(!1);case 6:case"end":return e.stop()}},e)}))).apply(this,arguments)}!function(){e.apply(this,arguments)}()},[]),[t,s]},he=function(e){var n=Object(r.useState)(null),t=Object(l.a)(n,2),o=t[0],i=t[1],a=Object(r.useState)(null),s=Object(l.a)(a,2),m=s[0],u=s[1];return Object(r.useEffect)(function(){function n(){return(n=Object(ue.a)(me.a.mark(function n(){var t;return me.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(null==e){n.next=7;break}return u(!0),n.next=4,ce("".concat(pe,"regions/").concat(e));case 4:t=n.sent,i(t.regions),u(!1);case 7:case"end":return n.stop()}},n)}))).apply(this,arguments)}!function(){n.apply(this,arguments)}()},[e]),[o,m]},ge={select:{minWidth:233,maxWidth:233}},be=Object(le.a)(ae.a.identity,function(e){return ae.a.map(e,function(e){return{label:e.name,value:e.code}})}),ye=Object(le.a)(ae.a.identity,function(e){return ae.a.map(e,function(e){var n=e.region;return{label:n,value:n}})}),ve={firstName:"",lastName:"",email:"",password:"",country:"",region:""},Se=ee.object().shape({firstName:ee.string().min(2,"Too Short!").max(50,"Too Long!").required("Required"),lastName:ee.string().min(2,"Too Short!").max(50,"Too Long!").required("Required"),email:ee.string().email("Invalid email").required("Required"),password:ee.string().min(6,function(){return o.a.createElement("span",null,"Too short")}).max(50,o.a.createElement("span",null,"Too long")).required("Required"),country:ee.string().required("Required"),region:ee.string().required("Required")}),Fe=function(e,n){var t=n.setSubmitting;setTimeout(function(){alert(JSON.stringify(e,null,2)),t(!1)},400)},xe=function(e){var n=e.name,t=e.type,r=e.errors,i=e.touched,a=e.label;return o.a.createElement(U.b,{type:t,name:n,render:function(e){var l=e.field;return o.a.createElement(z,Object.assign({},l,{type:t,error:r[n],touched:i[n],label:a}))}})},Ce=function(){var e=Object(r.useState)(null),n=Object(l.a)(e,2),t=n[0],i=n[1],a=fe(),s=Object(l.a)(a,2),m=s[0],u=(s[1],he(t)),c=Object(l.a)(u,2),d=c[0];c[1];return o.a.createElement("div",null,o.a.createElement(U.e,{initialValues:ve,validationSchema:Se,onSubmit:Fe},function(e){var n=e.errors,t=e.touched,r=e.isSubmitting,a=e.handleChange;return o.a.createElement(U.d,{style:D.form},o.a.createElement(xe,{type:"text",name:"firstName",label:"First Name",errors:n,touched:t}),o.a.createElement(xe,{type:"text",name:"lastName",label:"Last Name",errors:n,touched:t}),o.a.createElement(xe,{type:"email",name:"email",label:"Email",errors:n,touched:t}),o.a.createElement(xe,{type:"password",name:"password",label:"Password",errors:n,touched:t}),o.a.createElement(U.b,{name:"country",render:function(e){var r=e.field,l=e.form;return o.a.createElement(H,Object.assign({},r,{label:"Country",error:n.country,touched:t.country,options:be(m),style:ge.select,onChange:function(e){i(e.target.value),a(e),l.setFieldValue("region","")}}))}}),o.a.createElement(U.b,{name:"region",render:function(e){var r=e.field;return o.a.createElement(H,Object.assign({},r,{label:"State/Province",error:n.region,touched:t.region,options:ye(d),style:ge.select}))}}),o.a.createElement(_,{label:"Submit",type:"submit",disabled:r,unelevated:!0}))}))},Ee=t(23),Re=t(24),we=t(26),ke=t(25),Te=t(27),Ne=t(534),qe={todoItem:{display:"flex"},todoRemoveBtn:{marginTop:15,color:"rgba(45,45,45,0.9)"}},We={todos:[{item:"shopping"},{item:""}]},Oe=ee.object({todos:ee.array().of(ee.object({item:ee.string().required("Required")}))}),je=function(e){function n(){var e,t;Object(Ee.a)(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(t=Object(we.a)(this,(e=Object(ke.a)(n)).call.apply(e,[this].concat(o)))).onSubmit=function(e,n){var t=n.setSubmitting;setTimeout(function(){alert(JSON.stringify(e,null,2)),t(!1)},400)},t}return Object(Te.a)(n,e),Object(Re.a)(n,[{key:"render",value:function(){var e=this;return o.a.createElement("div",null,o.a.createElement(U.e,{initialValues:We,validationSchema:Oe,onSubmit:this.onSubmit},function(n){var t=n.values,r=n.errors,i=n.touched,a=n.isSubmitting;return o.a.createElement(U.d,{style:D.form},o.a.createElement(U.c,{name:"todos"},function(e){var n=e.remove,a=e.push;return o.a.createElement("div",null,ae.a.map(t.todos,function(e,t){return o.a.createElement("div",{style:qe.todoItem,key:t},o.a.createElement(Ve,{type:"text",name:"todos.".concat(t,".item"),index:t,label:"Todo",groupName:"todos",errors:r,touched:i}),o.a.createElement(Ne.a,{style:qe.todoRemoveBtn,icon:"close",type:"button",onClick:function(){return n(t)}}))}),o.a.createElement(_,{label:"Add Todo",icon:"add",type:"button",onClick:function(){return a({item:""})}}))}),o.a.createElement(_,{unelevated:!0,type:"submit",label:"Submit",disabled:a,onClick:e.submit}))}))}}]),n}(o.a.Component),Ve=function(e){var n=e.groupName,t=e.name,r=e.type,i=e.errors,a=e.touched,l=e.label,s=e.index;return o.a.createElement(U.b,{type:r,name:t,render:function(e){var t=e.field;return o.a.createElement(z,Object.assign({},t,{type:r,error:ae.a.get(i,[n,s,"item"],null),touched:ae.a.get(a,[n,s,"item"],!1),label:l}))}})},Ye=function(e){function n(e){var t;return Object(Ee.a)(this,n),(t=Object(we.a)(this,Object(ke.a)(n).call(this,e))).next=function(e){return t.setState(function(n){return{page:Math.min(n.page+1,t.props.children.length-1),values:e}})},t.previous=function(){return t.setState(function(e){return{page:Math.max(e.page-1,0)}})},t.validate=function(e){var n=o.a.Children.toArray(t.props.children)[t.state.page];return n.props.validate?n.props.validate(e):{}},t.handleSubmit=function(e,n){var r=t.props,i=r.children,a=r.onSubmit;if(t.state.page===o.a.Children.count(i)-1)return a(e,n);n.setTouched({}),n.setSubmitting(!1),t.next(e)},t.state={page:0,values:e.initialValues},t}return Object(Te.a)(n,e),Object(Re.a)(n,[{key:"render",value:function(){var e=this,n=this.props.children,t=this.state,r=t.page,i=t.values,a=o.a.Children.toArray(n)[r],l=r===o.a.Children.count(n)-1;return o.a.createElement(U.e,{initialValues:i,enableReinitialize:!1,validate:this.validate,onSubmit:this.handleSubmit,render:function(n){n.values;var t=n.handleSubmit,i=n.isSubmitting;n.handleReset;return o.a.createElement("form",{onSubmit:t},a,o.a.createElement("div",{className:"buttons"},r>0&&o.a.createElement(_,{label:"\xab Previous",type:"button",onClick:e.previous}),!l&&o.a.createElement(_,{label:"Next \xbb",type:"submit"}),l&&o.a.createElement(_,{label:"Submit",type:"submit",disabled:i,unelevated:!0})))}})}}]),n}(o.a.Component);Ye.Page=function(e){return e.children};var Me=Ye,Be={error:{marginTop:5,fontSize:"0.8em",color:"red"},select:{minWidth:233,maxWidth:233}},Le={firstName:"",lastName:"",email:"",favoriteColor:""},Ue=function(e,n){var t;(t=300,new Promise(function(e){return setTimeout(e,t)})).then(function(){window.alert(JSON.stringify(e,null,2)),n.setSubmitting(!1)})},Pe=function(e){return e?void 0:"Required"},Ie=function(e){var n=e.name,t=e.type,r=e.label,i=e.validate;return o.a.createElement(U.b,{type:t,name:n,validate:i,render:function(e){var n=e.field;return o.a.createElement(z,Object.assign({},n,{type:t,label:r}))}})},_e=function(){return o.a.createElement("div",{className:"App"},o.a.createElement(Me,{initialValues:Le,onSubmit:Ue},o.a.createElement(Me.Page,null,o.a.createElement("div",null,o.a.createElement(Ie,{type:"text",name:"firstName",label:"First Name",validate:Pe}),o.a.createElement(U.a,{style:Be.error,name:"firstName",component:"div",className:"field-error"})),o.a.createElement("div",null,o.a.createElement(Ie,{type:"text",name:"lastName",label:"Last Name",validate:Pe}),o.a.createElement(U.a,{style:Be.error,name:"lastName",component:"div",className:"field-error"}))),o.a.createElement(Me.Page,{validate:function(e){var n={};return e.email||(n.email="Required"),e.favoriteColor||(n.favoriteColor="Required"),n}},o.a.createElement("div",null,o.a.createElement(Ie,{type:"email",name:"email",label:"Email"}),o.a.createElement(U.a,{style:Be.error,name:"email",component:"div",className:"field-error"})),o.a.createElement("div",null,o.a.createElement(U.b,{name:"favoriteColor",render:function(e){var n=e.field;return o.a.createElement(H,Object.assign({},n,{label:"Select a Color",options:[{label:"\u2764\ufe0f Red",value:"red"},{label:"\ud83d\udc9a Green",value:"green"},{label:"\ud83d\udc99 Blue",value:"blue"}],style:Be.select}))}}),o.a.createElement(U.a,{style:Be.error,name:"favoriteColor",component:"div",className:"field-error"})))))},$e=t(3),Ae={email:"",password:""},ze=function(e){var n={};return e.email?/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(e.email)||(n.email="Invalid email address"):n.email="Email is required",e.password||(n.password="Password is required"),n},Je=function(e){return new Promise(function(n){return setTimeout(n,e)})},Ze=function(){var e=Object(ue.a)(me.a.mark(function e(n){return me.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Je(400);case 2:window.alert(JSON.stringify(n,0,2));case 3:case"end":return e.stop()}},e)}));return function(n){return e.apply(this,arguments)}}(),He=function(){return o.a.createElement($e.b,{initialValues:Ae,validate:ze,onSubmit:Ze},function(e){var n=e.handleSubmit,t=e.submitting;return o.a.createElement("form",{onSubmit:n,style:D.form},o.a.createElement($e.a,{name:"email",render:function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"email",error:t.error,touched:t.touched,label:"Email"}))}}),o.a.createElement($e.a,{name:"password",render:function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"password",error:t.error,touched:t.touched,label:"Pasword"}))}}),o.a.createElement(_,{disabled:t,label:"Submit",type:"submit",unelevated:!0}))})},De={select:{minWidth:233,maxWidth:233}},Ge=Object(le.a)(ae.a.identity,function(e){return ae.a.map(e,function(e){return{label:e.name,value:e.code}})}),Ke=Object(le.a)(ae.a.identity,function(e){return ae.a.map(e,function(e){var n=e.region;return{label:n,value:n}})}),Qe={firstName:"",lastName:"",email:"",password:"",country:"",region:""},Xe=function(e){return new Promise(function(n){return setTimeout(n,e)})},en=function(){var e=Object(ue.a)(me.a.mark(function e(n){return me.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Xe(400);case 2:window.alert(JSON.stringify(n,0,2));case 3:case"end":return e.stop()}},e)}));return function(n){return e.apply(this,arguments)}}(),nn=function(e){var n={};return e.firstName?e.firstName.length<2?n.firstName="Too Short!":e.firstName.length>50&&(n.firstName="Too Long!"):n.firstName="Required",e.lastName?e.lastName.length<2?n.lastName="Too Short!":e.lastName.length>50&&(n.lastName="Too Long!"):n.lastName="Required",e.email?/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(e.email)||(n.email="Invalid email address"):n.email="Email is required",e.password?e.password.length<6?n.password="Too Short!":e.password.length>50&&(n.password="Too Long!"):n.password="Required",e.country||(n.country="Required"),e.region||(n.region="Required"),n},tn=function(){var e=Object(r.useState)(null),n=Object(l.a)(e,2),t=n[0],i=n[1],a=fe(),s=Object(l.a)(a,2),m=s[0],u=(s[1],he(t)),c=Object(l.a)(u,2),d=c[0];c[1];return o.a.createElement("div",null,o.a.createElement($e.b,{initialValues:Qe,validate:nn,onSubmit:en},function(e){var n=e.handleSubmit,t=e.submitting,r=e.form;return o.a.createElement("form",{onSubmit:n,style:D.form},o.a.createElement($e.a,{name:"firstName"},function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"text",error:t.error,touched:t.touched,label:"First Name"}))}),o.a.createElement($e.a,{name:"lastName"},function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"text",error:t.error,touched:t.touched,label:"Last Name"}))}),o.a.createElement($e.a,{name:"email"},function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"email",error:t.error,touched:t.touched,label:"Email"}))}),o.a.createElement($e.a,{name:"password"},function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"password",error:t.error,touched:t.touched,label:"Password"}))}),o.a.createElement($e.a,{name:"country"},function(e){var n=e.input,t=e.meta;return o.a.createElement(H,Object.assign({},n,{label:"Country",error:t.error,touched:t.touched,options:Ge(m),style:De.select,onChange:function(e){r.change("country",e.target.value),i(e.target.value),r.change("region","")}}))}),o.a.createElement($e.a,{name:"region"},function(e){var n=e.input,t=e.meta;return o.a.createElement(H,Object.assign({},n,{label:"State/Province",error:t.error,touched:t.touched,options:Ke(d),style:De.select}))}),o.a.createElement(_,{label:"Submit",type:"submit",disabled:t,unelevated:!0}))}))},rn=t(162),on=t(159),an=t(160),ln={todoItem:{display:"flex"},todoRemoveBtn:{marginTop:15,color:"rgba(45,45,45,0.9)"}},sn={todos:[{item:"shopping"},{item:""}]},mn=function(e){function n(){var e,t;Object(Ee.a)(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(t=Object(we.a)(this,(e=Object(ke.a)(n)).call.apply(e,[this].concat(o)))).validate=function(e){if(!e)return"Required"},t.sleep=function(e){return new Promise(function(n){return setTimeout(n,e)})},t.onSubmit=function(){var e=Object(ue.a)(me.a.mark(function e(n){return me.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.sleep(400);case 2:window.alert(JSON.stringify(n,0,2));case 3:case"end":return e.stop()}},e)}));return function(n){return e.apply(this,arguments)}}(),t}return Object(Te.a)(n,e),Object(Re.a)(n,[{key:"render",value:function(){var e=this;return o.a.createElement("div",null,o.a.createElement($e.b,{initialValues:sn,onSubmit:this.onSubmit,mutators:Object(rn.a)({},on.a)},function(n){var t=n.handleSubmit,r=n.form.mutators,i=r.push,a=r.pop,l=n.submitting;return o.a.createElement("form",{onSubmit:t,style:D.form},o.a.createElement(an.a,{name:"todos"},function(n){var t=n.fields;return o.a.createElement("div",null,t.map(function(n,t){return o.a.createElement("div",{style:ln.todoItem,key:t},o.a.createElement($e.a,{name:"".concat(n,".item"),validate:e.validate},function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"text",error:t.error,touched:t.touched,label:"Todo"}))}),o.a.createElement(Ne.a,{style:ln.todoRemoveBtn,icon:"close",type:"button",onClick:function(){return a("todos")}}))}),o.a.createElement(_,{label:"Add Todo",icon:"add",type:"button",onClick:function(){return i("todos",{item:""})}}))}),o.a.createElement(_,{unelevated:!0,type:"submit",label:"Submit",disabled:l,onClick:e.submit}))}))}}]),n}(o.a.Component),un=function(e){function n(e){var t;return Object(Ee.a)(this,n),(t=Object(we.a)(this,Object(ke.a)(n).call(this,e))).next=function(e){return t.setState(function(n){return{page:Math.min(n.page+1,t.props.children.length-1),values:e}})},t.previous=function(){return t.setState(function(e){return{page:Math.max(e.page-1,0)}})},t.validate=function(e){var n=o.a.Children.toArray(t.props.children)[t.state.page];return n.props.validate?n.props.validate(e):{}},t.handleSubmit=function(e){var n=t.props,r=n.children,i=n.onSubmit;if(t.state.page===o.a.Children.count(r)-1)return i(e);t.next(e)},t.state={page:0,values:e.initialValues||{}},t}return Object(Te.a)(n,e),Object(Re.a)(n,[{key:"render",value:function(){var e=this,n=this.props.children,t=this.state,r=t.page,i=t.values,a=o.a.Children.toArray(n)[r],l=r===o.a.Children.count(n)-1;return o.a.createElement($e.b,{initialValues:i,validate:this.validate,onSubmit:this.handleSubmit},function(n){var t=n.handleSubmit,i=n.submitting;n.values;return o.a.createElement("form",{onSubmit:t},a,o.a.createElement("div",{className:"buttons"},r>0&&o.a.createElement(_,{label:"\xab Previous",type:"button",onClick:e.previous}),!l&&o.a.createElement(_,{label:"Next \xbb",type:"submit"}),l&&o.a.createElement(_,{label:"Submit",type:"submit",disabled:i,unelevated:!0})))})}}]),n}(o.a.Component);un.Page=function(e){return e.children};var cn={select:{minWidth:233,maxWidth:233}},dn={firstName:"",lastName:"",email:"",favoriteColor:""},pn=function(e){return new Promise(function(n){return setTimeout(n,e)})},fn=function(){var e=Object(ue.a)(me.a.mark(function e(n){return me.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,pn(300);case 2:window.alert(JSON.stringify(n,0,2));case 3:case"end":return e.stop()}},e)}));return function(n){return e.apply(this,arguments)}}(),hn=function(e){return e?void 0:"Required"},gn=function(){return o.a.createElement("div",{className:"App"},o.a.createElement(un,{initialValues:dn,onSubmit:fn},o.a.createElement(un.Page,null,o.a.createElement("div",null,o.a.createElement($e.a,{name:"firstName",validate:hn},function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"text",error:t.error,touched:t.touched,label:"First Name"}))}),o.a.createElement($e.a,{name:"lastName",validate:hn},function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"text",error:t.error,touched:t.touched,label:"Last Name"}))}))),o.a.createElement(un.Page,{validate:function(e){var n={};return e.email||(n.email="Required"),e.favoriteColor||(n.favoriteColor="Required"),n}},o.a.createElement($e.a,{name:"email"},function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"email",error:t.error,touched:t.touched,label:"Email"}))}),o.a.createElement($e.a,{name:"favoriteColor"},function(e){var n=e.input,t=e.meta;return o.a.createElement(H,Object.assign({},n,{label:"Select a Color",options:[{label:"\u2764\ufe0f Red",value:"red"},{label:"\ud83d\udc9a Green",value:"green"},{label:"\ud83d\udc99 Blue",value:"blue"}],error:t.error,touched:t.touched,style:cn.select}))}))))},bn=t(161),yn=Object(bn.a)(),vn={firstNameFocus:"",lastNameFocus:"",emailFocus:"",passwordFocus:""},Sn=function(e){var n={};return e.emailFocus?/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(e.emailFocus)||(n.emailFocus="Invalid email address"):n.emailFocus="Email is required",e.passwordFocus||(n.passwordFocus="Password is required"),e.firstNameFocus||(n.firstNameFocus="First name is required"),e.lastNameFocus||(n.lastNameFocus="Last name is required"),n},Fn=function(e){return new Promise(function(n){return setTimeout(n,e)})},xn=function(){var e=Object(ue.a)(me.a.mark(function e(n){return me.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Fn(400);case 2:window.alert(JSON.stringify(n,0,2));case 3:case"end":return e.stop()}},e)}));return function(n){return e.apply(this,arguments)}}(),Cn=function(){return o.a.createElement($e.b,{initialValues:vn,validate:Sn,onSubmit:xn,decorators:[yn]},function(e){var n=e.handleSubmit,t=e.submitting;return o.a.createElement("form",{onSubmit:n,style:D.form},o.a.createElement($e.a,{name:"firstNameFocus",render:function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"text",error:t.error,touched:t.touched,label:"First Name"}))}}),o.a.createElement($e.a,{name:"lastNameFocus",render:function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"text",error:t.error,touched:t.touched,label:"Last Name"}))}}),o.a.createElement($e.a,{name:"emailFocus",render:function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"email",error:t.error,touched:t.touched,label:"Email"}))}}),o.a.createElement($e.a,{name:"passwordFocus",render:function(e){var n=e.input,t=e.meta;return o.a.createElement(z,Object.assign({},n,{type:"password",error:t.error,touched:t.touched,label:"Pasword"}))}}),o.a.createElement(_,{disabled:t,label:"Submit",type:"submit",unelevated:!0}))})},En={table:{margin:"20px 10px 50px"},titleWapper:{maxWidth:1100,width:"100%",margin:"0 auto",display:"flex",flexDirection:"column"},title:{fontSize:28,lineHeight:"28px",fontWeight:600,marginBottom:15,width:"100%",color:"#252942",textAlign:"left"},subtitle:{fontSize:18,lineHeight:"28px",width:"100%",color:"#252942",textAlign:"left"},formAndCodeWrapper:{maxWidth:1100,width:"100%",background:"#fafafa",display:"flex",margin:"20px 0 60px",position:"relative",flexDirection:"column"},formAndCode:{display:"flex",flexWrap:"wrap",width:"100%"},formWrapper:{flexBasis:"26%",flexGrow:1,justifyContent:"flex-end",minHeigh:250,overflow:"hidden",margin:20},form:{width:"100%",flex:"0 1 450px",maxWidth:"450px",display:"flex",perspective:"500px",alignItems:"center",justifyContent:"center"},codeWrapper:{flexGrow:2,flexBasis:"65%",justifyContent:"flex-end",minHeigh:250,overflow:"hidden",marginLeft:10},code:{width:"100%",flex:"0 1 100%",maxWidth:"100%",display:"flex",alignItems:"center",justifyContent:"center"},item:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",width:"95%",margin:"5px 20px"},tabBar:function(e){return{margin:"0 0 -8px auto",width:1===e?200:320}},linkIcon:{color:"rgba(45,45,45,0.3)",marginRight:5,transform:"rotate(-135deg)"}},Rn=function(e){var n=e.title,t=e.subtitle,i=e.formikForm,a=e.rffForm,m=e.formikCode,u=e.rffCode,c=Object(r.useState)(0),d=Object(l.a)(c,2),p=d[0],f=d[1],h=null!=m,g=wn({hasFormik:h,hasRFF:null!=u}),b=0===p&&h?i:a,y=0===p&&h?m:u;return o.a.createElement("div",{style:En.item},o.a.createElement("div",{style:En.titleWapper},o.a.createElement("div",{style:En.title},n),o.a.createElement("div",{style:En.subtitle},t)),o.a.createElement("div",{style:En.formAndCodeWrapper},o.a.createElement(s.a,{style:En.tabBar(g.length),activeTabIndex:p,onActivate:function(e){return f(e.detail.index)}},g),o.a.createElement("div",{style:En.formAndCode},o.a.createElement("div",{style:En.formWrapper},o.a.createElement("div",{style:En.form},b)),o.a.createElement("div",{style:En.codeWrapper},o.a.createElement("div",{style:En.code},y)))))},wn=function(e){var n=e.hasFormik,t=e.hasRFF,r=[];return n&&r.push(o.a.createElement(m.a,{key:"formik"},"Formik")),t&&r.push(o.a.createElement(m.a,{key:"rff"},"React Final Form")),r},kn=function(){return o.a.createElement("div",null,o.a.createElement("div",{style:En.table},o.a.createElement(p,null)),o.a.createElement(Rn,{title:"Simple form",subtitle:"Just a simple example of a form with validation.",formikForm:o.a.createElement(X,null),rffForm:o.a.createElement(He,null),formikCode:o.a.createElement(L,{codeString:'import React from "react";\nimport { Formik } from "formik";\n\n// RMWC Components\nimport { Button, TextField } from "../UI-kit";\n\n// Styles\nimport commonStyles from "../styles";\n\nconst initialValues = { email: "", password: "" };\n\nconst LoginForm = () => (\n  <Formik initialValues={initialValues} validate={validate} onSubmit={onSubmit}>\n    {({\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      isSubmitting\n    }) => (\n      <form onSubmit={handleSubmit} style={commonStyles.form}>\n        <TextField\n          type="email"\n          name="email"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.email}\n          error={errors.email}\n          touched={touched.email}\n          label={"Email"}\n        />\n        <TextField\n          type="password"\n          name="password"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.password}\n          error={errors.password}\n          touched={touched.password}\n          label={"Pasword"}\n        />\n        <Button\n          label="Submit"\n          type="submit"\n          disabled={isSubmitting}\n          unelevated\n        />\n      </form>\n    )}\n  </Formik>\n);\n\nconst validate = values => {\n  let errors = {};\n  if (!values.email) {\n    errors.email = "Email is required";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,}$/i.test(values.email)) {\n    errors.email = "Invalid email address";\n  }\n  if (!values.password) {\n    errors.password = "Password is required";\n  }\n  return errors;\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nexport default LoginForm;\n',codeUrl:"https://github.com/hosseintalebi/formik-vs-react-final-form/blob/master/src/components/formik/SimpleForm.jsx"}),rffCode:o.a.createElement(L,{codeString:'import React from "react";\nimport { Form, Field } from "react-final-form";\n\n// RMWC Components\nimport { Button, TextField } from "../UI-kit";\n\n// Styles\nimport commonStyles from "../styles";\n\nconst initialValues = { email: "", password: "" };\n\nconst LoginForm = () => (\n  <Form initialValues={initialValues} validate={validate} onSubmit={onSubmit}>\n    {({ handleSubmit, submitting }) => (\n      <form onSubmit={handleSubmit} style={commonStyles.form}>\n        <Field\n          name="email"\n          render={({ input, meta }) => (\n            <TextField\n              {...input}\n              type="email"\n              error={meta.error}\n              touched={meta.touched}\n              label={"Email"}\n            />\n          )}\n        />\n        <Field\n          name="password"\n          render={({ input, meta }) => (\n            <TextField\n              {...input}\n              type="password"\n              error={meta.error}\n              touched={meta.touched}\n              label={"Pasword"}\n            />\n          )}\n        />\n        <Button disabled={submitting} label="Submit" type="submit" unelevated />\n      </form>\n    )}\n  </Form>\n);\n\nconst validate = values => {\n  let errors = {};\n  if (!values.email) {\n    errors.email = "Email is required";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,}$/i.test(values.email)) {\n    errors.email = "Invalid email address";\n  }\n  if (!values.password) {\n    errors.password = "Password is required";\n  }\n  return errors;\n};\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst onSubmit = async values => {\n  await sleep(400);\n  window.alert(JSON.stringify(values, 0, 2));\n};\n\nexport default LoginForm;\n',codeUrl:"https://github.com/hosseintalebi/formik-vs-react-final-form/blob/master/src/components/react-final-form/SimpleForm.jsx"})}),o.a.createElement(Rn,{title:"Form with schema validation",subtitle:"You can combine normal validation with schema validation using Yup.",formikForm:o.a.createElement(oe,null),formikCode:o.a.createElement(L,{codeString:'import React from "react";\nimport { Form, Formik } from "formik";\nimport * as Yup from "yup";\n\n// RMWC Components\nimport { Button, TextField } from "../UI-kit";\n\n// Styles\nimport commonStyles from "../styles";\n\nconst initialValues = { email: "", password: "" };\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .email("Invalid email")\n    .required("Required"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required("Required")\n});\n\nconst LoginFormYup = () => {\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={LoginSchema}\n        onSubmit={onSubmit}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          isSubmitting\n        }) => (\n          <Form style={commonStyles.form}>\n            <TextField\n              type="email"\n              name="email"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n              error={errors.email}\n              touched={touched.email}\n              label={"Email"}\n            />\n            <TextField\n              type="password"\n              name="password"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n              error={errors.password}\n              touched={touched.password}\n              label={"Pasword"}\n            />\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nexport default LoginFormYup;\n',codeUrl:"https://github.com/hosseintalebi/formik-vs-react-final-form/blob/master/src/components/formik/FormWithYup.jsx"})}),o.a.createElement(Rn,{title:"Form with network request",subtitle:"When the value of country changes, we fetch the states/provinces of that country and populate the select box.",formikForm:o.a.createElement(Ce,null),rffForm:o.a.createElement(tn,null),formikCode:o.a.createElement(L,{codeString:'import React, { useState } from "react";\n\nimport _ from "lodash";\nimport { Form, Formik, Field } from "formik";\nimport { createSelector } from "reselect";\nimport * as Yup from "yup";\n\n// RMWC Components\nimport { Button, TextField, Select } from "../UI-kit";\n\n// Hooks\nimport useCountries from "../../hooks/useCountries";\nimport userRegions from "../../hooks/userRegions";\n\n// Styles\nimport commonStyles from "../styles";\nconst styles = {\n  select: { minWidth: 233, maxWidth: 233 }\n};\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  password: "",\n  country: "",\n  region: ""\n};\n\nconst SignUpSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  lastName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  email: Yup.string()\n    .email("Invalid email")\n    .required("Required"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required("Required"),\n  country: Yup.string().required("Required"),\n  region: Yup.string().required("Required")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={SignUpSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type="text"\n              name="firstName"\n              label="First Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="text"\n              name="lastName"\n              label="Last Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="email"\n              name="email"\n              label="Email"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="password"\n              name="password"\n              label="Password"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name="country"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="Country"\n                    error={errors["country"]}\n                    touched={touched["country"]}\n                    options={countiesOptions$(countries)}\n                    style={styles.select}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue("region", "");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name="region"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="State/Province"\n                    error={errors["region"]}\n                    touched={touched["region"]}\n                    options={regionsOptions$(regions)}\n                    style={styles.select}\n                  />\n                );\n              }}\n            />\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Fieldimport React, { useState } from "react";\n\nimport _ from "lodash";\nimport { Form, Formik, Field } from "formik";\nimport { createSelector } from "reselect";\nimport * as Yup from "yup";\n\n// RMWC Components\nimport { Button, TextField, Select } from "../UI-kit";\n\n// Hooks\nimport useCountries from "../../hooks/useCountries";\nimport userRegions from "../../hooks/userRegions";\n\n// Styles\nimport commonStyles from "../styles";\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  password: "",\n  country: "",\n  region: ""\n};\n\nconst SignUpSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  lastName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  email: Yup.string()\n    .email("Invalid email")\n    .required("Required"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required("Required"),\n  country: Yup.string().required("Required"),\n  region: Yup.string().required("Required")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={SignUpSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type="text"\n              name="firstName"\n              label="First Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="text"\n              name="lastName"\n              label="Last Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="email"\n              name="email"\n              label="Email"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="password"\n              name="password"\n              label="Password"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name="country"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="Country"\n                    error={errors["country"]}\n                    touched={touched["country"]}\n                    options={countiesOptions$(countries)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue("region", "");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name="region"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="State/Province"\n                    error={errors["region"]}\n                    touched={touched["region"]}\n                    options={regionsOptions$(regions)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                  />\n                );\n              }}\n            />\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={errors[name]}\n        touched={touched[name]}\n        label={label}\n      />\n    )}\n  />\n);\n\nexport default SignUpForm;\n    type={type}import React, { useState } from "react";\n\nimport _ from "lodash";\nimport { Form, Formik, Field } from "formik";\nimport { createSelector } from "reselect";\nimport * as Yup from "yup";\n\n// RMWC Components\nimport { Button, TextField, Select } from "../UI-kit";\n\n// Hooks\nimport useCountries from "../../hooks/useCountries";\nimport userRegions from "../../hooks/userRegions";\n\n// Styles\nimport commonStyles from "../styles";\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  password: "",\n  country: "",\n  region: ""\n};\n\nconst SignUpSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  lastName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  email: Yup.string()\n    .email("Invalid email")\n    .required("Required"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required("Required"),\n  country: Yup.string().required("Required"),\n  region: Yup.string().required("Required")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={SignUpSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type="text"\n              name="firstName"\n              label="First Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="text"\n              name="lastName"\n              label="Last Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="email"\n              name="email"\n              label="Email"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="password"\n              name="password"\n              label="Password"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name="country"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="Country"\n                    error={errors["country"]}\n                    touched={touched["country"]}\n                    options={countiesOptions$(countries)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue("region", "");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name="region"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="State/Province"\n                    error={errors["region"]}\n                    touched={touched["region"]}\n                    options={regionsOptions$(regions)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                  />\n                );\n              }}\n            />\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={errors[name]}\n        touched={touched[name]}\n        label={label}\n      />\n    )}\n  />\n);\n\nexport default SignUpForm;\n    name={name}import React, { useState } from "react";\n\nimport _ from "lodash";\nimport { Form, Formik, Field } from "formik";\nimport { createSelector } from "reselect";\nimport * as Yup from "yup";\n\n// RMWC Components\nimport { Button, TextField, Select } from "../UI-kit";\n\n// Hooks\nimport useCountries from "../../hooks/useCountries";\nimport userRegions from "../../hooks/userRegions";\n\n// Styles\nimport commonStyles from "../styles";\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  password: "",\n  country: "",\n  region: ""\n};\n\nconst SignUpSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  lastName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  email: Yup.string()\n    .email("Invalid email")\n    .required("Required"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required("Required"),\n  country: Yup.string().required("Required"),\n  region: Yup.string().required("Required")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={SignUpSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type="text"\n              name="firstName"\n              label="First Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="text"\n              name="lastName"\n              label="Last Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="email"\n              name="email"\n              label="Email"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="password"\n              name="password"\n              label="Password"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name="country"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="Country"\n                    error={errors["country"]}\n                    touched={touched["country"]}\n                    options={countiesOptions$(countries)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue("region", "");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name="region"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="State/Province"\n                    error={errors["region"]}\n                    touched={touched["region"]}\n                    options={regionsOptions$(regions)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                  />\n                );\n              }}\n            />\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={errors[name]}\n        touched={touched[name]}\n        label={label}\n      />\n    )}\n  />\n);\n\nexport default SignUpForm;\n    render={({ field }) => (import React, { useState } from "react";\n\nimport _ from "lodash";\nimport { Form, Formik, Field } from "formik";\nimport { createSelector } from "reselect";\nimport * as Yup from "yup";\n\n// RMWC Components\nimport { Button, TextField, Select } from "../UI-kit";\n\n// Hooks\nimport useCountries from "../../hooks/useCountries";\nimport userRegions from "../../hooks/userRegions";\n\n// Styles\nimport commonStyles from "../styles";\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  password: "",\n  country: "",\n  region: ""\n};\n\nconst SignUpSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  lastName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  email: Yup.string()\n    .email("Invalid email")\n    .required("Required"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required("Required"),\n  country: Yup.string().required("Required"),\n  region: Yup.string().required("Required")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={SignUpSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type="text"\n              name="firstName"\n              label="First Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="text"\n              name="lastName"\n              label="Last Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="email"\n              name="email"\n              label="Email"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="password"\n              name="password"\n              label="Password"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name="country"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="Country"\n                    error={errors["country"]}\n                    touched={touched["country"]}\n                    options={countiesOptions$(countries)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue("region", "");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name="region"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="State/Province"\n                    error={errors["region"]}\n                    touched={touched["region"]}\n                    options={regionsOptions$(regions)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                  />\n                );\n              }}\n            />\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={errors[name]}\n        touched={touched[name]}\n        label={label}\n      />\n    )}\n  />\n);\n\nexport default SignUpForm;\n      <TextFieldimport React, { useState } from "react";\n\nimport _ from "lodash";\nimport { Form, Formik, Field } from "formik";\nimport { createSelector } from "reselect";\nimport * as Yup from "yup";\n\n// RMWC Components\nimport { Button, TextField, Select } from "../UI-kit";\n\n// Hooks\nimport useCountries from "../../hooks/useCountries";\nimport userRegions from "../../hooks/userRegions";\n\n// Styles\nimport commonStyles from "../styles";\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  password: "",\n  country: "",\n  region: ""\n};\n\nconst SignUpSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  lastName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  email: Yup.string()\n    .email("Invalid email")\n    .required("Required"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required("Required"),\n  country: Yup.string().required("Required"),\n  region: Yup.string().required("Required")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={SignUpSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type="text"\n              name="firstName"\n              label="First Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="text"\n              name="lastName"\n              label="Last Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="email"\n              name="email"\n              label="Email"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="password"\n              name="password"\n              label="Password"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name="country"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="Country"\n                    error={errors["country"]}\n                    touched={touched["country"]}\n                    options={countiesOptions$(countries)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue("region", "");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name="region"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="State/Province"\n                    error={errors["region"]}\n                    touched={touched["region"]}\n                    options={regionsOptions$(regions)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                  />\n                );\n              }}\n            />\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={errors[name]}\n        touched={touched[name]}\n        label={label}\n      />\n    )}\n  />\n);\n\nexport default SignUpForm;\n        {...field}import React, { useState } from "react";\n\nimport _ from "lodash";\nimport { Form, Formik, Field } from "formik";\nimport { createSelector } from "reselect";\nimport * as Yup from "yup";\n\n// RMWC Components\nimport { Button, TextField, Select } from "../UI-kit";\n\n// Hooks\nimport useCountries from "../../hooks/useCountries";\nimport userRegions from "../../hooks/userRegions";\n\n// Styles\nimport commonStyles from "../styles";\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  password: "",\n  country: "",\n  region: ""\n};\n\nconst SignUpSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  lastName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  email: Yup.string()\n    .email("Invalid email")\n    .required("Required"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required("Required"),\n  country: Yup.string().required("Required"),\n  region: Yup.string().required("Required")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={SignUpSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type="text"\n              name="firstName"\n              label="First Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="text"\n              name="lastName"\n              label="Last Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="email"\n              name="email"\n              label="Email"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="password"\n              name="password"\n              label="Password"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name="country"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="Country"\n                    error={errors["country"]}\n                    touched={touched["country"]}\n                    options={countiesOptions$(countries)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue("region", "");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name="region"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="State/Province"\n                    error={errors["region"]}\n                    touched={touched["region"]}\n                    options={regionsOptions$(regions)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                  />\n                );\n              }}\n            />\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={errors[name]}\n        touched={touched[name]}\n        label={label}\n      />\n    )}\n  />\n);\n\nexport default SignUpForm;\n        type={type}import React, { useState } from "react";\n\nimport _ from "lodash";\nimport { Form, Formik, Field } from "formik";\nimport { createSelector } from "reselect";\nimport * as Yup from "yup";\n\n// RMWC Components\nimport { Button, TextField, Select } from "../UI-kit";\n\n// Hooks\nimport useCountries from "../../hooks/useCountries";\nimport userRegions from "../../hooks/userRegions";\n\n// Styles\nimport commonStyles from "../styles";\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  password: "",\n  country: "",\n  region: ""\n};\n\nconst SignUpSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  lastName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  email: Yup.string()\n    .email("Invalid email")\n    .required("Required"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required("Required"),\n  country: Yup.string().required("Required"),\n  region: Yup.string().required("Required")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={SignUpSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type="text"\n              name="firstName"\n              label="First Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="text"\n              name="lastName"\n              label="Last Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="email"\n              name="email"\n              label="Email"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="password"\n              name="password"\n              label="Password"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name="country"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="Country"\n                    error={errors["country"]}\n                    touched={touched["country"]}\n                    options={countiesOptions$(countries)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue("region", "");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name="region"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="State/Province"\n                    error={errors["region"]}\n                    touched={touched["region"]}\n                    options={regionsOptions$(regions)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                  />\n                );\n              }}\n            />\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={errors[name]}\n        touched={touched[name]}\n        label={label}\n      />\n    )}\n  />\n);\n\nexport default SignUpForm;\n        error={errors[name]}import React, { useState } from "react";\n\nimport _ from "lodash";\nimport { Form, Formik, Field } from "formik";\nimport { createSelector } from "reselect";\nimport * as Yup from "yup";\n\n// RMWC Components\nimport { Button, TextField, Select } from "../UI-kit";\n\n// Hooks\nimport useCountries from "../../hooks/useCountries";\nimport userRegions from "../../hooks/userRegions";\n\n// Styles\nimport commonStyles from "../styles";\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  password: "",\n  country: "",\n  region: ""\n};\n\nconst SignUpSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  lastName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  email: Yup.string()\n    .email("Invalid email")\n    .required("Required"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required("Required"),\n  country: Yup.string().required("Required"),\n  region: Yup.string().required("Required")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={SignUpSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type="text"\n              name="firstName"\n              label="First Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="text"\n              name="lastName"\n              label="Last Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="email"\n              name="email"\n              label="Email"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="password"\n              name="password"\n              label="Password"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name="country"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="Country"\n                    error={errors["country"]}\n                    touched={touched["country"]}\n                    options={countiesOptions$(countries)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue("region", "");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name="region"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="State/Province"\n                    error={errors["region"]}\n                    touched={touched["region"]}\n                    options={regionsOptions$(regions)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                  />\n                );\n              }}\n            />\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={errors[name]}\n        touched={touched[name]}\n        label={label}\n      />\n    )}\n  />\n);\n\nexport default SignUpForm;\n        touched={touched[namimport React, { useState } from "react";\n\nimport _ from "lodash";\nimport { Form, Formik, Field } from "formik";\nimport { createSelector } from "reselect";\nimport * as Yup from "yup";\n\n// RMWC Components\nimport { Button, TextField, Select } from "../UI-kit";\n\n// Hooks\nimport useCountries from "../../hooks/useCountries";\nimport userRegions from "../../hooks/userRegions";\n\n// Styles\nimport commonStyles from "../styles";\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  password: "",\n  country: "",\n  region: ""\n};\n\nconst SignUpSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  lastName: Yup.string()\n    .min(2, "Too Short!")\n    .max(50, "Too Long!")\n    .required("Required"),\n  email: Yup.string()\n    .email("Invalid email")\n    .required("Required"),\n  password: Yup.string()\n    .min(6, () => <span>Too short</span>)\n    .max(50, <span>Too long</span>)\n    .required("Required"),\n  country: Yup.string().required("Required"),\n  region: Yup.string().required("Required")\n});\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={SignUpSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting, handleChange }) => (\n          <Form style={commonStyles.form}>\n            <FormikRMWCTextField\n              type="text"\n              name="firstName"\n              label="First Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="text"\n              name="lastName"\n              label="Last Name"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="email"\n              name="email"\n              label="Email"\n              errors={errors}\n              touched={touched}\n            />\n            <FormikRMWCTextField\n              type="password"\n              name="password"\n              label="Password"\n              errors={errors}\n              touched={touched}\n            />\n            <Field\n              name="country"\n              render={({ field, form }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="Country"\n                    error={errors["country"]}\n                    touched={touched["country"]}\n                    options={countiesOptions$(countries)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                    onChange={e => {\n                      setCountry(e.target.value);\n                      handleChange(e);\n                      form.setFieldValue("region", "");\n                    }}\n                  />\n                );\n              }}\n            />\n            <Field\n              name="region"\n              render={({ field }) => {\n                return (\n                  <Select\n                    {...field}\n                    label="State/Province"\n                    error={errors["region"]}\n                    touched={touched["region"]}\n                    options={regionsOptions$(regions)}\n                    style={{ minWidth: 233, maxWidth: 233 }}\n                  />\n                );\n              }}\n            />\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={isSubmitting}\n              unelevated\n            />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst onSubmit = (values, { setSubmitting }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n  }, 400);\n};\n\nconst FormikRMWCTextField = ({ name, type, errors, touched, label }) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={errors[name]}\n        touched={touched[name]}\n        label={label}\n      />\n    )}\n  />\n);\n\nexport default SignUpForm;e]}\n        label={label}\n      />\n    )}\n  />\n);\n\nexport default SignUpForm;\n',codeUrl:"https://github.com/hosseintalebi/formik-vs-react-final-form/blob/master/src/components/formik/FormWithFetch.jsx"}),rffCode:o.a.createElement(L,{codeString:'import React, { useState } from "react";\n\nimport _ from "lodash";\nimport { Form, Field } from "react-final-form";\nimport { createSelector } from "reselect";\n\n// RMWC Components\nimport { Button, TextField, Select } from "../UI-kit";\n\n// Hooks\nimport useCountries from "../../hooks/useCountries";\nimport userRegions from "../../hooks/userRegions";\n\n// Styles\nimport commonStyles from "../styles";\nconst styles = {\n  select: { minWidth: 233, maxWidth: 233 }\n};\n\n// Local Selectors\nconst countiesOptions$ = createSelector(\n  _.identity,\n  countries => {\n    return _.map(countries, ({ name, code }) => ({\n      label: name,\n      value: code\n    }));\n  }\n);\n\nconst regionsOptions$ = createSelector(\n  _.identity,\n  regions => {\n    return _.map(regions, ({ region }) => ({\n      label: region,\n      value: region\n    }));\n  }\n);\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  password: "",\n  country: "",\n  region: ""\n};\n\nconst SignUpForm = () => {\n  const [country, setCountry] = useState(null);\n  const [countries, loadingCountries] = useCountries();\n  const [regions, loadingRegions] = userRegions(country);\n\n  return (\n    <div>\n      <Form\n        initialValues={initialValues}\n        validate={validate}\n        onSubmit={onSubmit}\n      >\n        {({ handleSubmit, submitting, form }) => (\n          <form onSubmit={handleSubmit} style={commonStyles.form}>\n            <Field name="firstName">\n              {({ input, meta }) => (\n                <TextField\n                  {...input}\n                  type="text"\n                  error={meta.error}\n                  touched={meta.touched}\n                  label={"First Name"}\n                />\n              )}\n            </Field>\n            <Field name="lastName">\n              {({ input, meta }) => (\n                <TextField\n                  {...input}\n                  type="text"\n                  error={meta.error}\n                  touched={meta.touched}\n                  label={"Last Name"}\n                />\n              )}\n            </Field>\n            <Field name="email">\n              {({ input, meta }) => (\n                <TextField\n                  {...input}\n                  type="email"\n                  error={meta.error}\n                  touched={meta.touched}\n                  label={"Email"}\n                />\n              )}\n            </Field>\n            <Field name="password">\n              {({ input, meta }) => (\n                <TextField\n                  {...input}\n                  type="password"\n                  error={meta.error}\n                  touched={meta.touched}\n                  label={"Password"}\n                />\n              )}\n            </Field>\n            <Field name="country">\n              {({ input, meta }) => (\n                <Select\n                  {...input}\n                  label="Country"\n                  error={meta.error}\n                  touched={meta.touched}\n                  options={countiesOptions$(countries)}\n                  style={styles.select}\n                  onChange={e => {\n                    form.change("country", e.target.value);\n                    setCountry(e.target.value);\n                    form.change("region", "");\n                  }}\n                />\n              )}\n            </Field>\n            <Field name="region">\n              {({ input, meta }) => (\n                <Select\n                  {...input}\n                  label="State/Province"\n                  error={meta.error}\n                  touched={meta.touched}\n                  options={regionsOptions$(regions)}\n                  style={styles.select}\n                />\n              )}\n            </Field>\n            <Button\n              label="Submit"\n              type="submit"\n              disabled={submitting}\n              unelevated\n            />\n          </form>\n        )}\n      </Form>\n    </div>\n  );\n};\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst onSubmit = async values => {\n  await sleep(400);\n  window.alert(JSON.stringify(values, 0, 2));\n};\n\nconst validate = values => {\n  let errors = {};\n  if (!values.firstName) {\n    errors.firstName = "Required";\n  } else if (values.firstName.length < 2) {\n    errors.firstName = "Too Short!";\n  } else if (values.firstName.length > 50) {\n    errors.firstName = "Too Long!";\n  }\n\n  if (!values.lastName) {\n    errors.lastName = "Required";\n  } else if (values.lastName.length < 2) {\n    errors.lastName = "Too Short!";\n  } else if (values.lastName.length > 50) {\n    errors.lastName = "Too Long!";\n  }\n\n  if (!values.email) {\n    errors.email = "Email is required";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,}$/i.test(values.email)) {\n    errors.email = "Invalid email address";\n  }\n\n  if (!values.password) {\n    errors.password = "Required";\n  } else if (values.password.length < 6) {\n    errors.password = "Too Short!";\n  } else if (values.password.length > 50) {\n    errors.password = "Too Long!";\n  }\n\n  if (!values.country) {\n    errors.country = "Required";\n  }\n\n  if (!values.region) {\n    errors.region = "Required";\n  }\n  return errors;\n};\n\nexport default SignUpForm;\n',codeUrl:"https://github.com/hosseintalebi/formik-vs-react-final-form/blob/master/src/components/react-final-form/FormWithFetch.jsx"})}),o.a.createElement(Rn,{title:"Dynamic form",subtitle:"Add new inputs dynamically to the form.",formikForm:o.a.createElement(je,null),rffForm:o.a.createElement(mn,null),formikCode:o.a.createElement(L,{codeString:'import React from "react";\nimport * as Yup from "yup";\nimport _ from "lodash";\nimport { Form, Formik, Field, FieldArray } from "formik";\n\n// RMWC Components\nimport { Button, TextField } from "../UI-kit";\nimport { IconButton } from "rmwc";\n\n// Styles\nimport commonStyles from "../styles";\nconst styles = {\n  todoItem: {\n    display: "flex"\n  },\n  todoRemoveBtn: {\n    marginTop: 15,\n    color: "rgba(45,45,45,0.9)"\n  }\n};\n\nconst initialValues = {\n  todos: [{ item: "shopping" }, { item: "" }]\n};\n\nconst ValidationSchema = Yup.object({\n  todos: Yup.array().of(\n    Yup.object({\n      item: Yup.string().required("Required")\n    })\n  )\n});\n\nexport default class FormWithDynamicInput extends React.Component {\n  render() {\n    return (\n      <div>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={ValidationSchema}\n          onSubmit={this.onSubmit}\n        >\n          {({ values, errors, touched, isSubmitting }) => (\n            <Form style={commonStyles.form}>\n              <FieldArray name="todos">\n                {({ remove, push }) => (\n                  <div>\n                    {_.map(values.todos, (todo, index) => (\n                      <div style={styles.todoItem} key={index}>\n                        <GroupItemTextField\n                          type="text"\n                          name={`todos.${ index }.item`}\n                          index={index}\n                          label="Todo"\n                          groupName="todos"\n                          errors={errors}\n                          touched={touched}\n                        />\n                        <IconButton\n                          style={styles.todoRemoveBtn}\n                          icon={"close"}\n                          type="button"\n                          onClick={() => remove(index)}\n                        />\n                      </div>\n                    ))}\n                    <Button\n                      label="Add Todo"\n                      icon="add"\n                      type="button"\n                      onClick={() => push({ item: "" })}\n                    />\n                  </div>\n                )}\n              </FieldArray>\n\n              <Button\n                unelevated\n                type="submit"\n                label="Submit"\n                disabled={isSubmitting}\n                onClick={this.submit}\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    );\n  }\n\n  onSubmit = (values, { setSubmitting }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 400);\n  };\n}\n\nconst GroupItemTextField = ({\n  groupName,\n  name,\n  type,\n  errors,\n  touched,\n  label,\n  index\n}) => (\n  <Field\n    type={type}\n    name={name}\n    render={({ field }) => (\n      <TextField\n        {...field}\n        type={type}\n        error={_.get(errors, [groupName, index, "item"], null)}\n        touched={_.get(touched, [groupName, index, "item"], false)}\n        label={label}\n      />\n    )}\n  />\n);\n',codeUrl:"https://github.com/hosseintalebi/formik-vs-react-final-form/blob/master/src/components/formik/FormWithDynamicInput.jsx"}),rffCode:o.a.createElement(L,{codeString:'import React from "react";\nimport { Form, Field } from "react-final-form";\nimport arrayMutators from "final-form-arrays";\nimport { FieldArray } from "react-final-form-arrays";\n\n// RMWC Components\nimport { Button, TextField } from "../UI-kit";\nimport { IconButton } from "rmwc";\n\n// Styles\nimport commonStyles from "../styles";\nconst styles = {\n  todoItem: {\n    display: "flex"\n  },\n  todoRemoveBtn: {\n    marginTop: 15,\n    color: "rgba(45,45,45,0.9)"\n  }\n};\n\nconst initialValues = {\n  todos: [{ item: "shopping" }, { item: "" }]\n};\n\nexport default class FormWithDynamicInput extends React.Component {\n  render() {\n    return (\n      <div>\n        <Form\n          initialValues={initialValues}\n          onSubmit={this.onSubmit}\n          mutators={{\n            ...arrayMutators\n          }}\n        >\n          {({\n            handleSubmit,\n            form: {\n              mutators: { push, pop }\n            }, // injected from final-form-arrays above\n            submitting\n          }) => (\n            <form onSubmit={handleSubmit} style={commonStyles.form}>\n              <FieldArray name="todos">\n                {({ fields }) => (\n                  <div>\n                    {fields.map((name, index) => (\n                      <div style={styles.todoItem} key={index}>\n                        <Field name={`${ name }.item`} validate={this.validate}>\n                          {({ input, meta }) => (\n                            <TextField\n                              {...input}\n                              type="text"\n                              error={meta.error}\n                              touched={meta.touched}\n                              label={"Todo"}\n                            />\n                          )}\n                        </Field>\n                        <IconButton\n                          style={styles.todoRemoveBtn}\n                          icon={"close"}\n                          type="button"\n                          onClick={() => pop("todos")}\n                        />\n                      </div>\n                    ))}\n                    <Button\n                      label="Add Todo"\n                      icon="add"\n                      type="button"\n                      onClick={() => push("todos", { item: "" })}\n                    />\n                  </div>\n                )}\n              </FieldArray>\n\n              <Button\n                unelevated\n                type="submit"\n                label="Submit"\n                disabled={submitting}\n                onClick={this.submit}\n              />\n            </form>\n          )}\n        </Form>\n      </div>\n    );\n  }\n\n  validate = value => {\n    if (!value) {\n      return "Required";\n    }\n  };\n\n  sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  onSubmit = async values => {\n    await this.sleep(400);\n    window.alert(JSON.stringify(values, 0, 2));\n  };\n}\n',codeUrl:"https://github.com/hosseintalebi/formik-vs-react-final-form/blob/master/src/components/react-final-form/FormWithDynamicInput.jsx"})}),o.a.createElement(Rn,{title:"Focus on error form",subtitle:"If you press submit without filling out the form, it will focus on the first error.",rffForm:o.a.createElement(Cn,null),rffCode:o.a.createElement(L,{codeString:'import React from "react";\nimport { Form, Field } from "react-final-form";\nimport createDecorator from "final-form-focus";\n\n// RMWC Components\nimport { Button, TextField } from "../UI-kit";\n\n// Styles\nimport commonStyles from "../styles";\n\nconst focusOnError = createDecorator();\n\nconst initialValues = {\n  firstNameFocus: "",\n  lastNameFocus: "",\n  emailFocus: "",\n  passwordFocus: ""\n};\n\nconst LoginForm = () => (\n  <Form\n    initialValues={initialValues}\n    validate={validate}\n    onSubmit={onSubmit}\n    decorators={[focusOnError]}\n  >\n    {({ handleSubmit, submitting }) => (\n      <form onSubmit={handleSubmit} style={commonStyles.form}>\n        <Field\n          name="firstNameFocus"\n          render={({ input, meta }) => (\n            <TextField\n              {...input}\n              type="text"\n              error={meta.error}\n              touched={meta.touched}\n              label={"First Name"}\n            />\n          )}\n        />\n        <Field\n          name="lastNameFocus"\n          render={({ input, meta }) => (\n            <TextField\n              {...input}\n              type="text"\n              error={meta.error}\n              touched={meta.touched}\n              label={"Last Name"}\n            />\n          )}\n        />\n        <Field\n          name="emailFocus"\n          render={({ input, meta }) => (\n            <TextField\n              {...input}\n              type="email"\n              error={meta.error}\n              touched={meta.touched}\n              label={"Email"}\n            />\n          )}\n        />\n        <Field\n          name="passwordFocus"\n          render={({ input, meta }) => (\n            <TextField\n              {...input}\n              type="password"\n              error={meta.error}\n              touched={meta.touched}\n              label={"Pasword"}\n            />\n          )}\n        />\n        <Button disabled={submitting} label="Submit" type="submit" unelevated />\n      </form>\n    )}\n  </Form>\n);\n\nconst validate = values => {\n  let errors = {};\n  if (!values.emailFocus) {\n    errors.emailFocus = "Email is required";\n  } else if (\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,}$/i.test(values.emailFocus)\n  ) {\n    errors.emailFocus = "Invalid email address";\n  }\n  if (!values.passwordFocus) {\n    errors.passwordFocus = "Password is required";\n  }\n  if (!values.firstNameFocus) {\n    errors.firstNameFocus = "First name is required";\n  }\n  if (!values.lastNameFocus) {\n    errors.lastNameFocus = "Last name is required";\n  }\n  return errors;\n};\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst onSubmit = async values => {\n  await sleep(400);\n  window.alert(JSON.stringify(values, 0, 2));\n};\n\nexport default LoginForm;\n',codeUrl:"https://github.com/hosseintalebi/formik-vs-react-final-form/blob/master/src/components/react-final-form/FormWithErrorFocus.jsx"})}),o.a.createElement(Rn,{title:"Wizard Form",subtitle:"Multi step form with validation.",formikForm:o.a.createElement(_e,null),rffForm:o.a.createElement(gn,null),formikCode:o.a.createElement(L,{codeString:'import React from "react";\nimport { Field, ErrorMessage } from "formik";\nimport Wizard from "./Wizard";\n\n// RMWC Components\nimport { TextField, Select } from "../UI-kit";\n\n// Styles\nconst styles = {\n  error: {\n    marginTop: 5,\n    fontSize: "0.8em",\n    color: "red"\n  },\n  select: { minWidth: 233, maxWidth: 233 }\n};\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  favoriteColor: ""\n};\n\nconst WizardForm = () => (\n  <div className="App">\n    <Wizard initialValues={initialValues} onSubmit={onSubmit}>\n      <Wizard.Page>\n        <div>\n          <FormikRMWCTextField\n            type="text"\n            name="firstName"\n            label="First Name"\n            validate={required}\n          />\n          <ErrorMessage\n            style={styles.error}\n            name="firstName"\n            component="div"\n            className="field-error"\n          />\n        </div>\n        <div>\n          <FormikRMWCTextField\n            type="text"\n            name="lastName"\n            label="Last Name"\n            validate={required}\n          />\n          <ErrorMessage\n            style={styles.error}\n            name="lastName"\n            component="div"\n            className="field-error"\n          />\n        </div>\n      </Wizard.Page>\n      <Wizard.Page\n        validate={values => {\n          const errors = {};\n          if (!values.email) {\n            errors.email = "Required";\n          }\n          if (!values.favoriteColor) {\n            errors.favoriteColor = "Required";\n          }\n          return errors;\n        }}\n      >\n        <div>\n          <FormikRMWCTextField type="email" name="email" label="Email" />\n          <ErrorMessage\n            style={styles.error}\n            name="email"\n            component="div"\n            className="field-error"\n          />\n        </div>\n        <div>\n          <Field\n            name="favoriteColor"\n            render={({ field }) => {\n              return (\n                <Select\n                  {...field}\n                  label="Select a Color"\n                  options={[\n                    { label: "\u2764\ufe0f Red", value: "red" },\n                    { label: "\ud83d\udc9a Green", value: "green" },\n                    { label: "\ud83d\udc99 Blue", value: "blue" }\n                  ]}\n                  style={styles.select}\n                />\n              );\n            }}\n          />\n          <ErrorMessage\n            style={styles.error}\n            name="favoriteColor"\n            component="div"\n            className="field-error"\n          />\n        </div>\n      </Wizard.Page>\n    </Wizard>\n  </div>\n);\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst onSubmit = (values, actions) => {\n  sleep(300).then(() => {\n    window.alert(JSON.stringify(values, null, 2));\n    actions.setSubmitting(false);\n  });\n};\n\nconst required = value => (value ? undefined : "Required");\n\nconst FormikRMWCTextField = ({ name, type, label, validate }) => (\n  <Field\n    type={type}\n    name={name}\n    validate={validate}\n    render={({ field }) => <TextField {...field} type={type} label={label} />}\n  />\n);\nexport default WizardForm;\n',codeUrl:"https://github.com/hosseintalebi/formik-vs-react-final-form/blob/master/src/components/formik/WizardForm.jsx"}),rffCode:o.a.createElement(L,{codeString:'import React from "react";\nimport { Field } from "react-final-form";\nimport Wizard from "./Wizard";\n\n// RMWC Components\nimport { TextField, Select } from "../UI-kit";\n\n// Styles\nconst styles = {\n  select: { minWidth: 233, maxWidth: 233 }\n};\n\nconst initialValues = {\n  firstName: "",\n  lastName: "",\n  email: "",\n  favoriteColor: ""\n};\n\nconst WizatForm = () => (\n  <div className="App">\n    <Wizard initialValues={initialValues} onSubmit={onSubmit}>\n      <Wizard.Page>\n        <div>\n          <Field name="firstName" validate={required}>\n            {({ input, meta }) => (\n              <TextField\n                {...input}\n                type="text"\n                error={meta.error}\n                touched={meta.touched}\n                label={"First Name"}\n              />\n            )}\n          </Field>\n          <Field name="lastName" validate={required}>\n            {({ input, meta }) => (\n              <TextField\n                {...input}\n                type="text"\n                error={meta.error}\n                touched={meta.touched}\n                label={"Last Name"}\n              />\n            )}\n          </Field>\n        </div>\n      </Wizard.Page>\n      <Wizard.Page\n        validate={values => {\n          const errors = {};\n          if (!values.email) {\n            errors.email = "Required";\n          }\n          if (!values.favoriteColor) {\n            errors.favoriteColor = "Required";\n          }\n          return errors;\n        }}\n      >\n        <Field name="email">\n          {({ input, meta }) => (\n            <TextField\n              {...input}\n              type="email"\n              error={meta.error}\n              touched={meta.touched}\n              label={"Email"}\n            />\n          )}\n        </Field>\n        <Field name="favoriteColor">\n          {({ input, meta }) => {\n            return (\n              <Select\n                {...input}\n                label="Select a Color"\n                options={[\n                  { label: "\u2764\ufe0f Red", value: "red" },\n                  { label: "\ud83d\udc9a Green", value: "green" },\n                  { label: "\ud83d\udc99 Blue", value: "blue" }\n                ]}\n                error={meta.error}\n                touched={meta.touched}\n                style={styles.select}\n              />\n            );\n          }}\n        </Field>\n      </Wizard.Page>\n    </Wizard>\n  </div>\n);\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst onSubmit = async values => {\n  await sleep(300);\n  window.alert(JSON.stringify(values, 0, 2));\n};\n\nconst required = value => (value ? undefined : "Required");\n\nexport default WizatForm;\n',codeUrl:"https://github.com/hosseintalebi/formik-vs-react-final-form/blob/master/src/components/react-final-form/WizardForm.jsx"})}))};t(509);var Tn=function(){return o.a.createElement("div",{className:"App"},o.a.createElement(kn,null))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a.a.render(o.a.createElement(Tn,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[168,1,2]]]);
//# sourceMappingURL=main.fa6848b4.chunk.js.map